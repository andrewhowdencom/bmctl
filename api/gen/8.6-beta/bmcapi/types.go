// Package bmcapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package bmcapi

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// Defines values for FrameRate.
const (
	N11988 FrameRate = "119.88"
	N120   FrameRate = "120"
	N12000 FrameRate = "120.00"
	N2398  FrameRate = "23.98"
	N24    FrameRate = "24"
	N2400  FrameRate = "24.00"
	N25    FrameRate = "25"
	N2500  FrameRate = "25.00"
	N2997  FrameRate = "29.97"
	N30    FrameRate = "30"
	N3000  FrameRate = "30.00"
	N4795  FrameRate = "47.95"
	N48    FrameRate = "48"
	N4800  FrameRate = "48.00"
	N50    FrameRate = "50"
	N5000  FrameRate = "50.00"
	N5994  FrameRate = "59.94"
	N60    FrameRate = "60"
	N6000  FrameRate = "60.00"
)

// Defines values for MediaDeviceInformationState.
const (
	MediaDeviceInformationStateFormatting    MediaDeviceInformationState = "Formatting"
	MediaDeviceInformationStateMounted       MediaDeviceInformationState = "Mounted"
	MediaDeviceInformationStateNone          MediaDeviceInformationState = "None"
	MediaDeviceInformationStateRaidComponent MediaDeviceInformationState = "RaidComponent"
	MediaDeviceInformationStateScanning      MediaDeviceInformationState = "Scanning"
	MediaDeviceInformationStateUninitialised MediaDeviceInformationState = "Uninitialised"
)

// Defines values for PlaybackType.
const (
	Jog     PlaybackType = "Jog"
	Play    PlaybackType = "Play"
	Shuttle PlaybackType = "Shuttle"
	Var     PlaybackType = "Var"
)

// Defines values for TimecodeSourceTimecode.
const (
	TimecodeSourceTimecodeClip     TimecodeSourceTimecode = "Clip"
	TimecodeSourceTimecodeTimecode TimecodeSourceTimecode = "Timecode"
)

// Defines values for TransportResponseMode.
const (
	TransportResponseModeInputPreview TransportResponseMode = "InputPreview"
	TransportResponseModeInputRecord  TransportResponseMode = "InputRecord"
	TransportResponseModeOutput       TransportResponseMode = "Output"
)

// Defines values for AutoExposureModeMode.
const (
	Continuous AutoExposureModeMode = "Continuous"
	Off        AutoExposureModeMode = "Off"
	OneShot    AutoExposureModeMode = "OneShot"
)

// Defines values for AutoExposureModeType.
const (
	Empty       AutoExposureModeType = ""
	Iris        AutoExposureModeType = "Iris"
	IrisShutter AutoExposureModeType = "Iris,Shutter"
	Shutter     AutoExposureModeType = "Shutter"
	ShutterIris AutoExposureModeType = "Shutter,Iris"
)

// Defines values for InputInput.
const (
	InputInputCameraLeft     InputInput = "Camera - Left"
	InputInputCameraMono     InputInput = "Camera - Mono"
	InputInputCameraRight    InputInput = "Camera - Right"
	InputInputN35mmLeftLine  InputInput = "3.5mm Left - Line"
	InputInputN35mmLeftMic   InputInput = "3.5mm Left - Mic"
	InputInputN35mmMonoLine  InputInput = "3.5mm Mono - Line"
	InputInputN35mmMonoMic   InputInput = "3.5mm Mono - Mic"
	InputInputN35mmRightLine InputInput = "3.5mm Right - Line"
	InputInputN35mmRightMic  InputInput = "3.5mm Right - Mic"
	InputInputNone           InputInput = "None"
	InputInputXLR1Line       InputInput = "XLR1 - Line"
	InputInputXLR1Mic        InputInput = "XLR1 - Mic"
	InputInputXLR2Line       InputInput = "XLR2 - Line"
	InputInputXLR2Mic        InputInput = "XLR2 - Mic"
)

// Defines values for NdFilterDisplayMode.
const (
	Fraction NdFilterDisplayMode = "Fraction"
	Number   NdFilterDisplayMode = "Number"
	Stop     NdFilterDisplayMode = "Stop"
)

// Defines values for PutTransports0JSONBodyMode.
const (
	PutTransports0JSONBodyModeInputPreview PutTransports0JSONBodyMode = "InputPreview"
	PutTransports0JSONBodyModeOutput       PutTransports0JSONBodyMode = "Output"
)

// ActiveMedia defines model for ActiveMedia.
type ActiveMedia struct {
	// DeviceName Internal device name of this media device
	DeviceName *string `json:"deviceName,omitempty"`

	// WorkingsetIndex Working set index of the active media device
	WorkingsetIndex *int `json:"workingsetIndex,omitempty"`
}

// AddClip defines model for AddClip.
type AddClip struct {
	union json.RawMessage
}

// AddClip0 defines model for .
type AddClip0 struct {
	// Clips Unique ID used to identify this clip
	Clips *int `json:"clips,omitempty"`
}

// AddClip1 defines model for .
type AddClip1 struct {
	Clips *[]int `json:"clips,omitempty"`
}

// CodecFormat defines model for CodecFormat.
type CodecFormat struct {
	// Codec Currently selected codec
	Codec *string `json:"codec,omitempty"`

	// Container Multimedia container format
	Container *string `json:"container,omitempty"`
}

// Color defines model for Color.
type Color struct {
	Hue        *float32 `json:"hue,omitempty"`
	Saturation *float32 `json:"saturation,omitempty"`
}

// Contrast defines model for Contrast.
type Contrast struct {
	Adjust *float32 `json:"adjust,omitempty"`
	Pivot  *float32 `json:"pivot,omitempty"`
}

// DoFormatSupportedFilesystems defines model for DoFormatSupportedFilesystems.
type DoFormatSupportedFilesystems = []string

// Format defines model for Format.
type Format struct {
	// Codec Currently selected codec
	Codec                *string     `json:"codec,omitempty"`
	FrameRate            *FrameRate  `json:"frameRate,omitempty"`
	MaxOffSpeedFrameRate *float32    `json:"maxOffSpeedFrameRate,omitempty"`
	MinOffSpeedFrameRate *float32    `json:"minOffSpeedFrameRate,omitempty"`
	OffSpeedEnabled      *bool       `json:"offSpeedEnabled,omitempty"`
	OffSpeedFrameRate    *float32    `json:"offSpeedFrameRate,omitempty"`
	RecordResolution     *Resolution `json:"recordResolution,omitempty"`
	SensorResolution     *Resolution `json:"sensorResolution,omitempty"`
}

// FormatKey The key used to format this device, it must be fetched with the GET request and then provided back with a PUT request
type FormatKey = string

// FrameRate defines model for FrameRate.
type FrameRate string

// Gain defines model for Gain.
type Gain struct {
	Blue  *float32 `json:"blue,omitempty"`
	Green *float32 `json:"green,omitempty"`
	Luma  *float32 `json:"luma,omitempty"`
	Red   *float32 `json:"red,omitempty"`
}

// Gamma defines model for Gamma.
type Gamma struct {
	Blue  *float32 `json:"blue,omitempty"`
	Green *float32 `json:"green,omitempty"`
	Luma  *float32 `json:"luma,omitempty"`
	Red   *float32 `json:"red,omitempty"`
}

// GetRecord defines model for GetRecord.
type GetRecord struct {
	// Recording Is transport in Input Record mode
	Recording *bool `json:"recording,omitempty"`
}

// GetVideoFormat defines model for GetVideoFormat.
type GetVideoFormat struct {
	FrameRate *FrameRate `json:"frameRate,omitempty"`

	// Height Height dimension of video format
	Height *float32 `json:"height,omitempty"`

	// Interlaced Is the display format interlaced?
	Interlaced *bool `json:"interlaced,omitempty"`

	// Name Video format serialised as a string
	Name *string `json:"name,omitempty"`

	// Width Width dimension of video format
	Width *float32 `json:"width,omitempty"`
}

// Lift defines model for Lift.
type Lift struct {
	Blue  *float32 `json:"blue,omitempty"`
	Green *float32 `json:"green,omitempty"`
	Luma  *float32 `json:"luma,omitempty"`
	Red   *float32 `json:"red,omitempty"`
}

// LumaContribution defines model for LumaContribution.
type LumaContribution struct {
	LumaContribution *float32 `json:"lumaContribution,omitempty"`
}

// MediaDeviceInformation defines model for MediaDeviceInformation.
type MediaDeviceInformation struct {
	// State The current state of the media device.
	State *MediaDeviceInformationState `json:"state,omitempty"`
}

// MediaDeviceInformationState The current state of the media device.
type MediaDeviceInformationState string

// Offset defines model for Offset.
type Offset struct {
	Blue  *float32 `json:"blue,omitempty"`
	Green *float32 `json:"green,omitempty"`
	Luma  *float32 `json:"luma,omitempty"`
	Red   *float32 `json:"red,omitempty"`
}

// Playback defines model for Playback.
type Playback struct {
	// Loop When true playback loops from the end of the timeline to the beginning of the timeline
	Loop *bool `json:"loop,omitempty"`

	// Position Playback position on the timeline in units of video frames
	Position *int `json:"position,omitempty"`

	// SingleClip When true playback loops from the end of the current clip to the beginning of the current clip
	SingleClip *bool `json:"singleClip,omitempty"`

	// Speed Playback Speed, 1.0 for normal forward playback
	Speed *float32      `json:"speed,omitempty"`
	Type  *PlaybackType `json:"type,omitempty"`
}

// PlaybackType defines model for Playback.Type.
type PlaybackType string

// Record defines model for Record.
type Record struct {
	// ClipName Used to set the requested clipName to record to, when specifying "recording" attribute to True
	ClipName *string `json:"clipName,omitempty"`

	// Recording Is transport in Input Record mode
	Recording *bool `json:"recording,omitempty"`
}

// Resolution defines model for Resolution.
type Resolution struct {
	// Height Height of the resolution
	Height *float32 `json:"height,omitempty"`

	// Width Width of the resolution
	Width *float32 `json:"width,omitempty"`
}

// SupportedCodecFormats defines model for SupportedCodecFormats.
type SupportedCodecFormats struct {
	Codecs *[]CodecFormat `json:"codecs,omitempty"`
}

// SupportedFormat defines model for SupportedFormat.
type SupportedFormat struct {
	Codecs               *[]string    `json:"codecs,omitempty"`
	FrameRates           *[]FrameRate `json:"frameRates,omitempty"`
	MaxOffSpeedFrameRate *float32     `json:"maxOffSpeedFrameRate,omitempty"`
	MinOffSpeedFrameRate *float32     `json:"minOffSpeedFrameRate,omitempty"`
	RecordResolution     *Resolution  `json:"recordResolution,omitempty"`
	SensorResolution     *Resolution  `json:"sensorResolution,omitempty"`
}

// SupportedFormats defines model for SupportedFormats.
type SupportedFormats struct {
	SupportedFormats *[]SupportedFormat `json:"supportedFormats,omitempty"`
}

// SupportedVideoFormats defines model for SupportedVideoFormats.
type SupportedVideoFormats struct {
	Formats *[]VideoFormat `json:"formats,omitempty"`
}

// SystemResponse The properties will be populated only with the values that are supported/implemented by the device in use.
type SystemResponse struct {
	CodecFormat *CodecFormat    `json:"codecFormat,omitempty"`
	VideoFormat *GetVideoFormat `json:"videoFormat,omitempty"`
}

// Timecode defines model for Timecode.
type Timecode struct {
	// Clip The position of the clip timecode in units of binary-coded decimal (BCD).
	Clip *float32 `json:"clip,omitempty"`

	// Timecode The time of day timecode in units of binary-coded decimal (BCD).
	Timecode *float32 `json:"timecode,omitempty"`
}

// TimecodeSource defines model for TimecodeSource.
type TimecodeSource struct {
	Timecode *TimecodeSourceTimecode `json:"timecode,omitempty"`
}

// TimecodeSourceTimecode defines model for TimecodeSource.Timecode.
type TimecodeSourceTimecode string

// Timeline defines model for Timeline.
type Timeline struct {
	Clips *[]struct {
		// ClipUniqueId Unique ID used to identify this clip
		ClipUniqueId *int `json:"clipUniqueId,omitempty"`

		// FrameCount Number of frames in this clip on the timeline
		FrameCount *int `json:"frameCount,omitempty"`
	} `json:"clips,omitempty"`
}

// TransportResponse defines model for TransportResponse.
type TransportResponse struct {
	// Mode Transport mode.
	Mode *TransportResponseMode `json:"mode,omitempty"`
}

// TransportResponseMode Transport mode.
type TransportResponseMode string

// VideoFormat defines model for VideoFormat.
type VideoFormat struct {
	FrameRate *FrameRate `json:"frameRate,omitempty"`

	// Height Height dimension of video format
	Height *float32 `json:"height,omitempty"`

	// Interlaced Is the display format interlaced?
	Interlaced *bool `json:"interlaced,omitempty"`

	// Width Width dimension of video format
	Width *float32 `json:"width,omitempty"`
}

// Workingset defines model for Workingset.
type Workingset struct {
	// Size The fixed size of this device's working set
	Size       *int `json:"size,omitempty"`
	Workingset *[]struct {
		// ActiveDisk Is this current item the active disk
		ActiveDisk *bool `json:"activeDisk,omitempty"`

		// ClipCount Number of clips currently on the device
		ClipCount *int `json:"clipCount,omitempty"`

		// DeviceName Internal device name of this media device
		DeviceName *string `json:"deviceName,omitempty"`

		// Index Index of this media in the working set
		Index *int `json:"index,omitempty"`

		// RemainingRecordTime Remaining record time on media device in seconds
		RemainingRecordTime *int `json:"remainingRecordTime,omitempty"`

		// RemainingSpace Remaining space on media device in bytes
		RemainingSpace *int `json:"remainingSpace,omitempty"`

		// TotalSpace Total space on media device in bytes
		TotalSpace *int `json:"totalSpace,omitempty"`

		// Volume Volume name
		Volume *string `json:"volume,omitempty"`
	} `json:"workingset,omitempty"`
}

// ActivePreset defines model for activePreset.
type ActivePreset struct {
	Preset *string `json:"preset,omitempty"`
}

// ApertureNumber Aperture number
type ApertureNumber = float32

// ApertureStop Aperture stop value
type ApertureStop = float32

// AutoExposureMode Auto exposure mode
type AutoExposureMode struct {
	Mode *AutoExposureModeMode `json:"mode,omitempty"`
	Type *AutoExposureModeType `json:"type,omitempty"`
}

// AutoExposureModeMode defines model for AutoExposureMode.Mode.
type AutoExposureModeMode string

// AutoExposureModeType defines model for AutoExposureMode.Type.
type AutoExposureModeType string

// Available defines model for available.
type Available struct {
	Available *bool `json:"available,omitempty"`
}

// Description defines model for description.
type Description struct {
	Capabilities *struct {
		// LowCutFilter Input supports setting of low cut filter
		LowCutFilter *bool `json:"LowCutFilter,omitempty"`
		Padding      *struct {
			// Available Input supports setting of padding
			Available *bool `json:"available,omitempty"`

			// Forced Padding is forced to be set for the input
			Forced *bool `json:"forced,omitempty"`

			// Value Value of the padding in dB
			Value *float32 `json:"value,omitempty"`
		} `json:"Padding,omitempty"`

		// PhantomPower Input supports setting of phantom power
		PhantomPower *bool `json:"PhantomPower,omitempty"`
	} `json:"capabilities,omitempty"`
	GainRange *struct {
		// Max The maximum gain value in dB
		Max *float32 `json:"Max,omitempty"`

		// Min The minimum gain value in dB
		Min *float32 `json:"Min,omitempty"`
	} `json:"gainRange,omitempty"`
}

// EventsList defines model for eventsList.
type EventsList struct {
	Events *[]string `json:"events,omitempty"`
}

// FocalLength Focal length in mm
type FocalLength = int

// Input defines model for input.
type Input struct {
	Input *InputInput `json:"input,omitempty"`
}

// InputInput defines model for Input.Input.
type InputInput string

// Level The input level of the selected channel. Only one property is required for setting. If both provided, gain will be prioritized and level would be ignored.
type Level struct {
	Gain       *float32 `json:"gain,omitempty"`
	Normalised *float32 `json:"normalised,omitempty"`
}

// LowCutFilter defines model for lowCutFilter.
type LowCutFilter struct {
	LowCutFilter *bool `json:"lowCutFilter,omitempty"`
}

// NdFilterDisplayMode defines model for ndFilterDisplayMode.
type NdFilterDisplayMode string

// Normalised Normalised value
type Normalised = float32

// Padding defines model for padding.
type Padding struct {
	Padding *bool `json:"padding,omitempty"`
}

// PhantomPower defines model for phantomPower.
type PhantomPower struct {
	PhantomPower *bool `json:"phantomPower,omitempty"`
}

// PostPresetResponse defines model for postPresetResponse.
type PostPresetResponse struct {
	// PresetAdded Name of the preset uploaded
	PresetAdded *string `json:"presetAdded,omitempty"`
}

// PresetList defines model for presetList.
type PresetList struct {
	// Presets List of the presets on the camera
	Presets *[]string `json:"presets,omitempty"`
}

// ShutterAngle Shutter angle
type ShutterAngle = int

// ShutterSpeed Shutter speed value in fractions of a second (minimum is sensor frame rate)
type ShutterSpeed = int

// SupportedInputs defines model for supportedInputs.
type SupportedInputs struct {
	SupportedInputs *[]struct {
		// Available Is the input available to be switched into from the current input for the selected channel
		Available *bool  `json:"available,omitempty"`
		Schema    *Input `json:"schema,omitempty"`
	} `json:"supportedInputs,omitempty"`
}

// PutLensFocusJSONBody defines parameters for PutLensFocus.
type PutLensFocusJSONBody struct {
	// Focus Normalised value
	Focus *Normalised `json:"focus,omitempty"`
}

// PutLensIrisJSONBody defines parameters for PutLensIris.
type PutLensIrisJSONBody struct {
	// ApertureNumber Aperture number
	ApertureNumber *ApertureNumber `json:"apertureNumber,omitempty"`

	// ApertureStop Aperture stop value
	ApertureStop *ApertureStop `json:"apertureStop,omitempty"`

	// Normalised Normalised value
	Normalised *Normalised `json:"normalised,omitempty"`
}

// PutLensZoomJSONBody defines parameters for PutLensZoom.
type PutLensZoomJSONBody struct {
	// FocalLength Focal length in mm
	FocalLength *FocalLength `json:"focalLength,omitempty"`

	// Normalised Normalised value
	Normalised *Normalised `json:"normalised,omitempty"`
}

// PutMediaActiveJSONBody defines parameters for PutMediaActive.
type PutMediaActiveJSONBody struct {
	// WorkingsetIndex Working set index of the media to become active
	WorkingsetIndex *int `json:"workingsetIndex,omitempty"`
}

// PutMediaDevicesDeviceNameDoformatJSONBody defines parameters for PutMediaDevicesDeviceNameDoformat.
type PutMediaDevicesDeviceNameDoformatJSONBody struct {
	// Filesystem Filesystem to format to (supportedFilesystems returns list of supported fileSystems)
	Filesystem *string `json:"filesystem,omitempty"`

	// Key The key used to format this device, it must be fetched with the GET request and then provided back with a PUT request
	Key *FormatKey `json:"key,omitempty"`

	// Volume Volume name to set for the disk after format
	Volume *string `json:"volume,omitempty"`
}

// PutTransports0JSONBody defines parameters for PutTransports0.
type PutTransports0JSONBody struct {
	// Mode Transport mode.
	Mode *PutTransports0JSONBodyMode `json:"mode,omitempty"`
}

// PutTransports0JSONBodyMode defines parameters for PutTransports0.
type PutTransports0JSONBodyMode string

// PutVideoAutoExposureJSONBody defines parameters for PutVideoAutoExposure.
type PutVideoAutoExposureJSONBody struct {
	// Mode Auto exposure mode
	Mode *AutoExposureMode `json:"mode,omitempty"`
}

// PutVideoGainJSONBody defines parameters for PutVideoGain.
type PutVideoGainJSONBody struct {
	// Gain Gain value in decibels to set
	Gain *int `json:"gain,omitempty"`
}

// PutVideoIsoJSONBody defines parameters for PutVideoIso.
type PutVideoIsoJSONBody struct {
	// Iso ISO value to set
	Iso *int `json:"iso,omitempty"`
}

// PutVideoNdFilterJSONBody defines parameters for PutVideoNdFilter.
type PutVideoNdFilterJSONBody struct {
	// Stop Filter power (fStop) to set
	Stop *float32 `json:"stop,omitempty"`
}

// PutVideoNdFilterDisplayModeJSONBody defines parameters for PutVideoNdFilterDisplayMode.
type PutVideoNdFilterDisplayModeJSONBody struct {
	DisplayMode *NdFilterDisplayMode `json:"displayMode,omitempty"`
}

// PutVideoShutterJSONBody defines parameters for PutVideoShutter.
type PutVideoShutterJSONBody struct {
	// ShutterAngle Shutter angle
	ShutterAngle *ShutterAngle `json:"shutterAngle,omitempty"`

	// ShutterSpeed Shutter speed value in fractions of a second (minimum is sensor frame rate)
	ShutterSpeed *ShutterSpeed `json:"shutterSpeed,omitempty"`
}

// PutVideoWhiteBalanceJSONBody defines parameters for PutVideoWhiteBalance.
type PutVideoWhiteBalanceJSONBody struct {
	// WhiteBalance White balance to set
	WhiteBalance *int `json:"whiteBalance,omitempty"`
}

// PutVideoWhiteBalanceTintJSONBody defines parameters for PutVideoWhiteBalanceTint.
type PutVideoWhiteBalanceTintJSONBody struct {
	// WhiteBalanceTint White balance tint to set
	WhiteBalanceTint *int `json:"whiteBalanceTint,omitempty"`
}

// PutAudioChannelChannelIndexInputJSONRequestBody defines body for PutAudioChannelChannelIndexInput for application/json ContentType.
type PutAudioChannelChannelIndexInputJSONRequestBody = Input

// PutAudioChannelChannelIndexLevelJSONRequestBody defines body for PutAudioChannelChannelIndexLevel for application/json ContentType.
type PutAudioChannelChannelIndexLevelJSONRequestBody = Level

// PutAudioChannelChannelIndexLowCutFilterJSONRequestBody defines body for PutAudioChannelChannelIndexLowCutFilter for application/json ContentType.
type PutAudioChannelChannelIndexLowCutFilterJSONRequestBody = LowCutFilter

// PutAudioChannelChannelIndexPaddingJSONRequestBody defines body for PutAudioChannelChannelIndexPadding for application/json ContentType.
type PutAudioChannelChannelIndexPaddingJSONRequestBody = Padding

// PutAudioChannelChannelIndexPhantomPowerJSONRequestBody defines body for PutAudioChannelChannelIndexPhantomPower for application/json ContentType.
type PutAudioChannelChannelIndexPhantomPowerJSONRequestBody = PhantomPower

// PutColorCorrectionColorJSONRequestBody defines body for PutColorCorrectionColor for application/json ContentType.
type PutColorCorrectionColorJSONRequestBody = Color

// PutColorCorrectionContrastJSONRequestBody defines body for PutColorCorrectionContrast for application/json ContentType.
type PutColorCorrectionContrastJSONRequestBody = Contrast

// PutColorCorrectionGainJSONRequestBody defines body for PutColorCorrectionGain for application/json ContentType.
type PutColorCorrectionGainJSONRequestBody = Gain

// PutColorCorrectionGammaJSONRequestBody defines body for PutColorCorrectionGamma for application/json ContentType.
type PutColorCorrectionGammaJSONRequestBody = Gamma

// PutColorCorrectionLiftJSONRequestBody defines body for PutColorCorrectionLift for application/json ContentType.
type PutColorCorrectionLiftJSONRequestBody = Lift

// PutColorCorrectionLumaContributionJSONRequestBody defines body for PutColorCorrectionLumaContribution for application/json ContentType.
type PutColorCorrectionLumaContributionJSONRequestBody = LumaContribution

// PutColorCorrectionOffsetJSONRequestBody defines body for PutColorCorrectionOffset for application/json ContentType.
type PutColorCorrectionOffsetJSONRequestBody = Offset

// PutLensFocusJSONRequestBody defines body for PutLensFocus for application/json ContentType.
type PutLensFocusJSONRequestBody PutLensFocusJSONBody

// PutLensIrisJSONRequestBody defines body for PutLensIris for application/json ContentType.
type PutLensIrisJSONRequestBody PutLensIrisJSONBody

// PutLensZoomJSONRequestBody defines body for PutLensZoom for application/json ContentType.
type PutLensZoomJSONRequestBody PutLensZoomJSONBody

// PutMediaActiveJSONRequestBody defines body for PutMediaActive for application/json ContentType.
type PutMediaActiveJSONRequestBody PutMediaActiveJSONBody

// PutMediaDevicesDeviceNameDoformatJSONRequestBody defines body for PutMediaDevicesDeviceNameDoformat for application/json ContentType.
type PutMediaDevicesDeviceNameDoformatJSONRequestBody PutMediaDevicesDeviceNameDoformatJSONBody

// PutPresetsActiveJSONRequestBody defines body for PutPresetsActive for application/json ContentType.
type PutPresetsActiveJSONRequestBody = ActivePreset

// PutSystemCodecFormatJSONRequestBody defines body for PutSystemCodecFormat for application/json ContentType.
type PutSystemCodecFormatJSONRequestBody = CodecFormat

// PutSystemFormatJSONRequestBody defines body for PutSystemFormat for application/json ContentType.
type PutSystemFormatJSONRequestBody = Format

// PutSystemVideoFormatJSONRequestBody defines body for PutSystemVideoFormat for application/json ContentType.
type PutSystemVideoFormatJSONRequestBody = VideoFormat

// PostTimelines0AddJSONRequestBody defines body for PostTimelines0Add for application/json ContentType.
type PostTimelines0AddJSONRequestBody = AddClip

// PutTransports0JSONRequestBody defines body for PutTransports0 for application/json ContentType.
type PutTransports0JSONRequestBody PutTransports0JSONBody

// PutTransports0PlaybackJSONRequestBody defines body for PutTransports0Playback for application/json ContentType.
type PutTransports0PlaybackJSONRequestBody = Playback

// PutTransports0RecordJSONRequestBody defines body for PutTransports0Record for application/json ContentType.
type PutTransports0RecordJSONRequestBody = Record

// PutVideoAutoExposureJSONRequestBody defines body for PutVideoAutoExposure for application/json ContentType.
type PutVideoAutoExposureJSONRequestBody PutVideoAutoExposureJSONBody

// PutVideoGainJSONRequestBody defines body for PutVideoGain for application/json ContentType.
type PutVideoGainJSONRequestBody PutVideoGainJSONBody

// PutVideoIsoJSONRequestBody defines body for PutVideoIso for application/json ContentType.
type PutVideoIsoJSONRequestBody PutVideoIsoJSONBody

// PutVideoNdFilterJSONRequestBody defines body for PutVideoNdFilter for application/json ContentType.
type PutVideoNdFilterJSONRequestBody PutVideoNdFilterJSONBody

// PutVideoNdFilterDisplayModeJSONRequestBody defines body for PutVideoNdFilterDisplayMode for application/json ContentType.
type PutVideoNdFilterDisplayModeJSONRequestBody PutVideoNdFilterDisplayModeJSONBody

// PutVideoShutterJSONRequestBody defines body for PutVideoShutter for application/json ContentType.
type PutVideoShutterJSONRequestBody PutVideoShutterJSONBody

// PutVideoWhiteBalanceJSONRequestBody defines body for PutVideoWhiteBalance for application/json ContentType.
type PutVideoWhiteBalanceJSONRequestBody PutVideoWhiteBalanceJSONBody

// PutVideoWhiteBalanceTintJSONRequestBody defines body for PutVideoWhiteBalanceTint for application/json ContentType.
type PutVideoWhiteBalanceTintJSONRequestBody PutVideoWhiteBalanceTintJSONBody

// AsAddClip0 returns the union data inside the AddClip as a AddClip0
func (t AddClip) AsAddClip0() (AddClip0, error) {
	var body AddClip0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddClip0 overwrites any union data inside the AddClip as the provided AddClip0
func (t *AddClip) FromAddClip0(v AddClip0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddClip0 performs a merge with any union data inside the AddClip, using the provided AddClip0
func (t *AddClip) MergeAddClip0(v AddClip0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAddClip1 returns the union data inside the AddClip as a AddClip1
func (t AddClip) AsAddClip1() (AddClip1, error) {
	var body AddClip1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddClip1 overwrites any union data inside the AddClip as the provided AddClip1
func (t *AddClip) FromAddClip1(v AddClip1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddClip1 performs a merge with any union data inside the AddClip, using the provided AddClip1
func (t *AddClip) MergeAddClip1(v AddClip1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AddClip) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AddClip) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
