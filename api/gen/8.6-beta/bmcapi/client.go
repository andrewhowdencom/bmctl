// Package bmcapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package bmcapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAudioChannelChannelIndexAvailable request
	GetAudioChannelChannelIndexAvailable(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAudioChannelChannelIndexInput request
	GetAudioChannelChannelIndexInput(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAudioChannelChannelIndexInputWithBody request with any body
	PutAudioChannelChannelIndexInputWithBody(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAudioChannelChannelIndexInput(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexInputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAudioChannelChannelIndexInputDescription request
	GetAudioChannelChannelIndexInputDescription(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAudioChannelChannelIndexLevel request
	GetAudioChannelChannelIndexLevel(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAudioChannelChannelIndexLevelWithBody request with any body
	PutAudioChannelChannelIndexLevelWithBody(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAudioChannelChannelIndexLevel(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAudioChannelChannelIndexLowCutFilter request
	GetAudioChannelChannelIndexLowCutFilter(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAudioChannelChannelIndexLowCutFilterWithBody request with any body
	PutAudioChannelChannelIndexLowCutFilterWithBody(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAudioChannelChannelIndexLowCutFilter(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexLowCutFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAudioChannelChannelIndexPadding request
	GetAudioChannelChannelIndexPadding(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAudioChannelChannelIndexPaddingWithBody request with any body
	PutAudioChannelChannelIndexPaddingWithBody(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAudioChannelChannelIndexPadding(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexPaddingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAudioChannelChannelIndexPhantomPower request
	GetAudioChannelChannelIndexPhantomPower(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAudioChannelChannelIndexPhantomPowerWithBody request with any body
	PutAudioChannelChannelIndexPhantomPowerWithBody(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAudioChannelChannelIndexPhantomPower(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexPhantomPowerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAudioChannelChannelIndexSupportedInputs request
	GetAudioChannelChannelIndexSupportedInputs(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColorCorrectionColor request
	GetColorCorrectionColor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutColorCorrectionColorWithBody request with any body
	PutColorCorrectionColorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutColorCorrectionColor(ctx context.Context, body PutColorCorrectionColorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColorCorrectionContrast request
	GetColorCorrectionContrast(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutColorCorrectionContrastWithBody request with any body
	PutColorCorrectionContrastWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutColorCorrectionContrast(ctx context.Context, body PutColorCorrectionContrastJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColorCorrectionGain request
	GetColorCorrectionGain(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutColorCorrectionGainWithBody request with any body
	PutColorCorrectionGainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutColorCorrectionGain(ctx context.Context, body PutColorCorrectionGainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColorCorrectionGamma request
	GetColorCorrectionGamma(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutColorCorrectionGammaWithBody request with any body
	PutColorCorrectionGammaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutColorCorrectionGamma(ctx context.Context, body PutColorCorrectionGammaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColorCorrectionLift request
	GetColorCorrectionLift(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutColorCorrectionLiftWithBody request with any body
	PutColorCorrectionLiftWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutColorCorrectionLift(ctx context.Context, body PutColorCorrectionLiftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColorCorrectionLumaContribution request
	GetColorCorrectionLumaContribution(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutColorCorrectionLumaContributionWithBody request with any body
	PutColorCorrectionLumaContributionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutColorCorrectionLumaContribution(ctx context.Context, body PutColorCorrectionLumaContributionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColorCorrectionOffset request
	GetColorCorrectionOffset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutColorCorrectionOffsetWithBody request with any body
	PutColorCorrectionOffsetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutColorCorrectionOffset(ctx context.Context, body PutColorCorrectionOffsetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventList request
	GetEventList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLensFocus request
	GetLensFocus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLensFocusWithBody request with any body
	PutLensFocusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLensFocus(ctx context.Context, body PutLensFocusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLensFocusDoAutoFocus request
	PutLensFocusDoAutoFocus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLensIris request
	GetLensIris(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLensIrisWithBody request with any body
	PutLensIrisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLensIris(ctx context.Context, body PutLensIrisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLensZoom request
	GetLensZoom(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLensZoomWithBody request with any body
	PutLensZoomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLensZoom(ctx context.Context, body PutLensZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMediaActive request
	GetMediaActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMediaActiveWithBody request with any body
	PutMediaActiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMediaActive(ctx context.Context, body PutMediaActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMediaDevicesDoformatSupportedFilesystems request
	GetMediaDevicesDoformatSupportedFilesystems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMediaDevicesDeviceName request
	GetMediaDevicesDeviceName(ctx context.Context, deviceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMediaDevicesDeviceNameDoformat request
	GetMediaDevicesDeviceNameDoformat(ctx context.Context, deviceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMediaDevicesDeviceNameDoformatWithBody request with any body
	PutMediaDevicesDeviceNameDoformatWithBody(ctx context.Context, deviceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMediaDevicesDeviceNameDoformat(ctx context.Context, deviceName string, body PutMediaDevicesDeviceNameDoformatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMediaWorkingset request
	GetMediaWorkingset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPresets request
	GetPresets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPresetsWithBody request with any body
	PostPresetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPresetsActive request
	GetPresetsActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPresetsActiveWithBody request with any body
	PutPresetsActiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPresetsActive(ctx context.Context, body PutPresetsActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePresetsPresetName request
	DeletePresetsPresetName(ctx context.Context, presetName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPresetsPresetName request
	GetPresetsPresetName(ctx context.Context, presetName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPresetsPresetName request
	PutPresetsPresetName(ctx context.Context, presetName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystem request
	GetSystem(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemCodecFormat request
	GetSystemCodecFormat(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSystemCodecFormatWithBody request with any body
	PutSystemCodecFormatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSystemCodecFormat(ctx context.Context, body PutSystemCodecFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemFormat request
	GetSystemFormat(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSystemFormatWithBody request with any body
	PutSystemFormatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSystemFormat(ctx context.Context, body PutSystemFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemSupportedCodecFormats request
	GetSystemSupportedCodecFormats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemSupportedFormats request
	GetSystemSupportedFormats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemSupportedVideoFormats request
	GetSystemSupportedVideoFormats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemVideoFormat request
	GetSystemVideoFormat(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSystemVideoFormatWithBody request with any body
	PutSystemVideoFormatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSystemVideoFormat(ctx context.Context, body PutSystemVideoFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTimelines0 request
	DeleteTimelines0(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimelines0 request
	GetTimelines0(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTimelines0AddWithBody request with any body
	PostTimelines0AddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTimelines0Add(ctx context.Context, body PostTimelines0AddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransports0 request
	GetTransports0(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTransports0WithBody request with any body
	PutTransports0WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTransports0(ctx context.Context, body PutTransports0JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransports0Play request
	GetTransports0Play(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTransports0Play request
	PutTransports0Play(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransports0Playback request
	GetTransports0Playback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTransports0PlaybackWithBody request with any body
	PutTransports0PlaybackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTransports0Playback(ctx context.Context, body PutTransports0PlaybackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransports0Record request
	GetTransports0Record(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTransports0RecordWithBody request with any body
	PutTransports0RecordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTransports0Record(ctx context.Context, body PutTransports0RecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransports0Stop request
	GetTransports0Stop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTransports0Stop request
	PutTransports0Stop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransports0Timecode request
	GetTransports0Timecode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransports0TimecodeSource request
	GetTransports0TimecodeSource(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideoAutoExposure request
	GetVideoAutoExposure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVideoAutoExposureWithBody request with any body
	PutVideoAutoExposureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVideoAutoExposure(ctx context.Context, body PutVideoAutoExposureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideoGain request
	GetVideoGain(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVideoGainWithBody request with any body
	PutVideoGainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVideoGain(ctx context.Context, body PutVideoGainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideoIso request
	GetVideoIso(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVideoIsoWithBody request with any body
	PutVideoIsoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVideoIso(ctx context.Context, body PutVideoIsoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideoNdFilter request
	GetVideoNdFilter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVideoNdFilterWithBody request with any body
	PutVideoNdFilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVideoNdFilter(ctx context.Context, body PutVideoNdFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideoNdFilterDisplayMode request
	GetVideoNdFilterDisplayMode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVideoNdFilterDisplayModeWithBody request with any body
	PutVideoNdFilterDisplayModeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVideoNdFilterDisplayMode(ctx context.Context, body PutVideoNdFilterDisplayModeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideoShutter request
	GetVideoShutter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVideoShutterWithBody request with any body
	PutVideoShutterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVideoShutter(ctx context.Context, body PutVideoShutterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideoWhiteBalance request
	GetVideoWhiteBalance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVideoWhiteBalanceWithBody request with any body
	PutVideoWhiteBalanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVideoWhiteBalance(ctx context.Context, body PutVideoWhiteBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVideoWhiteBalanceDoAuto request
	PutVideoWhiteBalanceDoAuto(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideoWhiteBalanceTint request
	GetVideoWhiteBalanceTint(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVideoWhiteBalanceTintWithBody request with any body
	PutVideoWhiteBalanceTintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVideoWhiteBalanceTint(ctx context.Context, body PutVideoWhiteBalanceTintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAudioChannelChannelIndexAvailable(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAudioChannelChannelIndexAvailableRequest(c.Server, channelIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAudioChannelChannelIndexInput(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAudioChannelChannelIndexInputRequest(c.Server, channelIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAudioChannelChannelIndexInputWithBody(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAudioChannelChannelIndexInputRequestWithBody(c.Server, channelIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAudioChannelChannelIndexInput(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexInputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAudioChannelChannelIndexInputRequest(c.Server, channelIndex, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAudioChannelChannelIndexInputDescription(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAudioChannelChannelIndexInputDescriptionRequest(c.Server, channelIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAudioChannelChannelIndexLevel(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAudioChannelChannelIndexLevelRequest(c.Server, channelIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAudioChannelChannelIndexLevelWithBody(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAudioChannelChannelIndexLevelRequestWithBody(c.Server, channelIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAudioChannelChannelIndexLevel(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAudioChannelChannelIndexLevelRequest(c.Server, channelIndex, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAudioChannelChannelIndexLowCutFilter(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAudioChannelChannelIndexLowCutFilterRequest(c.Server, channelIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAudioChannelChannelIndexLowCutFilterWithBody(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAudioChannelChannelIndexLowCutFilterRequestWithBody(c.Server, channelIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAudioChannelChannelIndexLowCutFilter(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexLowCutFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAudioChannelChannelIndexLowCutFilterRequest(c.Server, channelIndex, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAudioChannelChannelIndexPadding(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAudioChannelChannelIndexPaddingRequest(c.Server, channelIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAudioChannelChannelIndexPaddingWithBody(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAudioChannelChannelIndexPaddingRequestWithBody(c.Server, channelIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAudioChannelChannelIndexPadding(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexPaddingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAudioChannelChannelIndexPaddingRequest(c.Server, channelIndex, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAudioChannelChannelIndexPhantomPower(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAudioChannelChannelIndexPhantomPowerRequest(c.Server, channelIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAudioChannelChannelIndexPhantomPowerWithBody(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAudioChannelChannelIndexPhantomPowerRequestWithBody(c.Server, channelIndex, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAudioChannelChannelIndexPhantomPower(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexPhantomPowerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAudioChannelChannelIndexPhantomPowerRequest(c.Server, channelIndex, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAudioChannelChannelIndexSupportedInputs(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAudioChannelChannelIndexSupportedInputsRequest(c.Server, channelIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColorCorrectionColor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColorCorrectionColorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionColorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionColorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionColor(ctx context.Context, body PutColorCorrectionColorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionColorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColorCorrectionContrast(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColorCorrectionContrastRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionContrastWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionContrastRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionContrast(ctx context.Context, body PutColorCorrectionContrastJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionContrastRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColorCorrectionGain(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColorCorrectionGainRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionGainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionGainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionGain(ctx context.Context, body PutColorCorrectionGainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionGainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColorCorrectionGamma(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColorCorrectionGammaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionGammaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionGammaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionGamma(ctx context.Context, body PutColorCorrectionGammaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionGammaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColorCorrectionLift(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColorCorrectionLiftRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionLiftWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionLiftRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionLift(ctx context.Context, body PutColorCorrectionLiftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionLiftRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColorCorrectionLumaContribution(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColorCorrectionLumaContributionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionLumaContributionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionLumaContributionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionLumaContribution(ctx context.Context, body PutColorCorrectionLumaContributionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionLumaContributionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColorCorrectionOffset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColorCorrectionOffsetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionOffsetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionOffsetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutColorCorrectionOffset(ctx context.Context, body PutColorCorrectionOffsetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutColorCorrectionOffsetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLensFocus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLensFocusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLensFocusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLensFocusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLensFocus(ctx context.Context, body PutLensFocusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLensFocusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLensFocusDoAutoFocus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLensFocusDoAutoFocusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLensIris(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLensIrisRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLensIrisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLensIrisRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLensIris(ctx context.Context, body PutLensIrisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLensIrisRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLensZoom(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLensZoomRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLensZoomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLensZoomRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLensZoom(ctx context.Context, body PutLensZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLensZoomRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMediaActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMediaActiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMediaActiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMediaActiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMediaActive(ctx context.Context, body PutMediaActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMediaActiveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMediaDevicesDoformatSupportedFilesystems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMediaDevicesDoformatSupportedFilesystemsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMediaDevicesDeviceName(ctx context.Context, deviceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMediaDevicesDeviceNameRequest(c.Server, deviceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMediaDevicesDeviceNameDoformat(ctx context.Context, deviceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMediaDevicesDeviceNameDoformatRequest(c.Server, deviceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMediaDevicesDeviceNameDoformatWithBody(ctx context.Context, deviceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMediaDevicesDeviceNameDoformatRequestWithBody(c.Server, deviceName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMediaDevicesDeviceNameDoformat(ctx context.Context, deviceName string, body PutMediaDevicesDeviceNameDoformatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMediaDevicesDeviceNameDoformatRequest(c.Server, deviceName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMediaWorkingset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMediaWorkingsetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPresets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPresetsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPresetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPresetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPresetsActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPresetsActiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPresetsActiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPresetsActiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPresetsActive(ctx context.Context, body PutPresetsActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPresetsActiveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePresetsPresetName(ctx context.Context, presetName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePresetsPresetNameRequest(c.Server, presetName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPresetsPresetName(ctx context.Context, presetName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPresetsPresetNameRequest(c.Server, presetName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPresetsPresetName(ctx context.Context, presetName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPresetsPresetNameRequest(c.Server, presetName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystem(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemCodecFormat(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemCodecFormatRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemCodecFormatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemCodecFormatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemCodecFormat(ctx context.Context, body PutSystemCodecFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemCodecFormatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemFormat(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemFormatRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemFormatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemFormatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemFormat(ctx context.Context, body PutSystemFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemFormatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemSupportedCodecFormats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemSupportedCodecFormatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemSupportedFormats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemSupportedFormatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemSupportedVideoFormats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemSupportedVideoFormatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemVideoFormat(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemVideoFormatRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemVideoFormatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemVideoFormatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemVideoFormat(ctx context.Context, body PutSystemVideoFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemVideoFormatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTimelines0(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTimelines0Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimelines0(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimelines0Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTimelines0AddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTimelines0AddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTimelines0Add(ctx context.Context, body PostTimelines0AddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTimelines0AddRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransports0(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransports0Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransports0WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransports0RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransports0(ctx context.Context, body PutTransports0JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransports0Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransports0Play(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransports0PlayRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransports0Play(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransports0PlayRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransports0Playback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransports0PlaybackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransports0PlaybackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransports0PlaybackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransports0Playback(ctx context.Context, body PutTransports0PlaybackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransports0PlaybackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransports0Record(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransports0RecordRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransports0RecordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransports0RecordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransports0Record(ctx context.Context, body PutTransports0RecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransports0RecordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransports0Stop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransports0StopRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransports0Stop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransports0StopRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransports0Timecode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransports0TimecodeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransports0TimecodeSource(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransports0TimecodeSourceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideoAutoExposure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideoAutoExposureRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoAutoExposureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoAutoExposureRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoAutoExposure(ctx context.Context, body PutVideoAutoExposureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoAutoExposureRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideoGain(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideoGainRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoGainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoGainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoGain(ctx context.Context, body PutVideoGainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoGainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideoIso(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideoIsoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoIsoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoIsoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoIso(ctx context.Context, body PutVideoIsoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoIsoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideoNdFilter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideoNdFilterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoNdFilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoNdFilterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoNdFilter(ctx context.Context, body PutVideoNdFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoNdFilterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideoNdFilterDisplayMode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideoNdFilterDisplayModeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoNdFilterDisplayModeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoNdFilterDisplayModeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoNdFilterDisplayMode(ctx context.Context, body PutVideoNdFilterDisplayModeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoNdFilterDisplayModeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideoShutter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideoShutterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoShutterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoShutterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoShutter(ctx context.Context, body PutVideoShutterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoShutterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideoWhiteBalance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideoWhiteBalanceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoWhiteBalanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoWhiteBalanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoWhiteBalance(ctx context.Context, body PutVideoWhiteBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoWhiteBalanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoWhiteBalanceDoAuto(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoWhiteBalanceDoAutoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideoWhiteBalanceTint(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideoWhiteBalanceTintRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoWhiteBalanceTintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoWhiteBalanceTintRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVideoWhiteBalanceTint(ctx context.Context, body PutVideoWhiteBalanceTintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVideoWhiteBalanceTintRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAudioChannelChannelIndexAvailableRequest generates requests for GetAudioChannelChannelIndexAvailable
func NewGetAudioChannelChannelIndexAvailableRequest(server string, channelIndex int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/available", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAudioChannelChannelIndexInputRequest generates requests for GetAudioChannelChannelIndexInput
func NewGetAudioChannelChannelIndexInputRequest(server string, channelIndex int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/input", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAudioChannelChannelIndexInputRequest calls the generic PutAudioChannelChannelIndexInput builder with application/json body
func NewPutAudioChannelChannelIndexInputRequest(server string, channelIndex int, body PutAudioChannelChannelIndexInputJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAudioChannelChannelIndexInputRequestWithBody(server, channelIndex, "application/json", bodyReader)
}

// NewPutAudioChannelChannelIndexInputRequestWithBody generates requests for PutAudioChannelChannelIndexInput with any type of body
func NewPutAudioChannelChannelIndexInputRequestWithBody(server string, channelIndex int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/input", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAudioChannelChannelIndexInputDescriptionRequest generates requests for GetAudioChannelChannelIndexInputDescription
func NewGetAudioChannelChannelIndexInputDescriptionRequest(server string, channelIndex int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/input/description", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAudioChannelChannelIndexLevelRequest generates requests for GetAudioChannelChannelIndexLevel
func NewGetAudioChannelChannelIndexLevelRequest(server string, channelIndex int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/level", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAudioChannelChannelIndexLevelRequest calls the generic PutAudioChannelChannelIndexLevel builder with application/json body
func NewPutAudioChannelChannelIndexLevelRequest(server string, channelIndex int, body PutAudioChannelChannelIndexLevelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAudioChannelChannelIndexLevelRequestWithBody(server, channelIndex, "application/json", bodyReader)
}

// NewPutAudioChannelChannelIndexLevelRequestWithBody generates requests for PutAudioChannelChannelIndexLevel with any type of body
func NewPutAudioChannelChannelIndexLevelRequestWithBody(server string, channelIndex int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/level", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAudioChannelChannelIndexLowCutFilterRequest generates requests for GetAudioChannelChannelIndexLowCutFilter
func NewGetAudioChannelChannelIndexLowCutFilterRequest(server string, channelIndex int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/lowCutFilter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAudioChannelChannelIndexLowCutFilterRequest calls the generic PutAudioChannelChannelIndexLowCutFilter builder with application/json body
func NewPutAudioChannelChannelIndexLowCutFilterRequest(server string, channelIndex int, body PutAudioChannelChannelIndexLowCutFilterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAudioChannelChannelIndexLowCutFilterRequestWithBody(server, channelIndex, "application/json", bodyReader)
}

// NewPutAudioChannelChannelIndexLowCutFilterRequestWithBody generates requests for PutAudioChannelChannelIndexLowCutFilter with any type of body
func NewPutAudioChannelChannelIndexLowCutFilterRequestWithBody(server string, channelIndex int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/lowCutFilter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAudioChannelChannelIndexPaddingRequest generates requests for GetAudioChannelChannelIndexPadding
func NewGetAudioChannelChannelIndexPaddingRequest(server string, channelIndex int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/padding", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAudioChannelChannelIndexPaddingRequest calls the generic PutAudioChannelChannelIndexPadding builder with application/json body
func NewPutAudioChannelChannelIndexPaddingRequest(server string, channelIndex int, body PutAudioChannelChannelIndexPaddingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAudioChannelChannelIndexPaddingRequestWithBody(server, channelIndex, "application/json", bodyReader)
}

// NewPutAudioChannelChannelIndexPaddingRequestWithBody generates requests for PutAudioChannelChannelIndexPadding with any type of body
func NewPutAudioChannelChannelIndexPaddingRequestWithBody(server string, channelIndex int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/padding", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAudioChannelChannelIndexPhantomPowerRequest generates requests for GetAudioChannelChannelIndexPhantomPower
func NewGetAudioChannelChannelIndexPhantomPowerRequest(server string, channelIndex int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/phantomPower", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAudioChannelChannelIndexPhantomPowerRequest calls the generic PutAudioChannelChannelIndexPhantomPower builder with application/json body
func NewPutAudioChannelChannelIndexPhantomPowerRequest(server string, channelIndex int, body PutAudioChannelChannelIndexPhantomPowerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAudioChannelChannelIndexPhantomPowerRequestWithBody(server, channelIndex, "application/json", bodyReader)
}

// NewPutAudioChannelChannelIndexPhantomPowerRequestWithBody generates requests for PutAudioChannelChannelIndexPhantomPower with any type of body
func NewPutAudioChannelChannelIndexPhantomPowerRequestWithBody(server string, channelIndex int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/phantomPower", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAudioChannelChannelIndexSupportedInputsRequest generates requests for GetAudioChannelChannelIndexSupportedInputs
func NewGetAudioChannelChannelIndexSupportedInputsRequest(server string, channelIndex int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelIndex", runtime.ParamLocationPath, channelIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/channel/%s/supportedInputs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetColorCorrectionColorRequest generates requests for GetColorCorrectionColor
func NewGetColorCorrectionColorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/color")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutColorCorrectionColorRequest calls the generic PutColorCorrectionColor builder with application/json body
func NewPutColorCorrectionColorRequest(server string, body PutColorCorrectionColorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutColorCorrectionColorRequestWithBody(server, "application/json", bodyReader)
}

// NewPutColorCorrectionColorRequestWithBody generates requests for PutColorCorrectionColor with any type of body
func NewPutColorCorrectionColorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/color")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetColorCorrectionContrastRequest generates requests for GetColorCorrectionContrast
func NewGetColorCorrectionContrastRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/contrast")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutColorCorrectionContrastRequest calls the generic PutColorCorrectionContrast builder with application/json body
func NewPutColorCorrectionContrastRequest(server string, body PutColorCorrectionContrastJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutColorCorrectionContrastRequestWithBody(server, "application/json", bodyReader)
}

// NewPutColorCorrectionContrastRequestWithBody generates requests for PutColorCorrectionContrast with any type of body
func NewPutColorCorrectionContrastRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/contrast")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetColorCorrectionGainRequest generates requests for GetColorCorrectionGain
func NewGetColorCorrectionGainRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/gain")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutColorCorrectionGainRequest calls the generic PutColorCorrectionGain builder with application/json body
func NewPutColorCorrectionGainRequest(server string, body PutColorCorrectionGainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutColorCorrectionGainRequestWithBody(server, "application/json", bodyReader)
}

// NewPutColorCorrectionGainRequestWithBody generates requests for PutColorCorrectionGain with any type of body
func NewPutColorCorrectionGainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/gain")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetColorCorrectionGammaRequest generates requests for GetColorCorrectionGamma
func NewGetColorCorrectionGammaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/gamma")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutColorCorrectionGammaRequest calls the generic PutColorCorrectionGamma builder with application/json body
func NewPutColorCorrectionGammaRequest(server string, body PutColorCorrectionGammaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutColorCorrectionGammaRequestWithBody(server, "application/json", bodyReader)
}

// NewPutColorCorrectionGammaRequestWithBody generates requests for PutColorCorrectionGamma with any type of body
func NewPutColorCorrectionGammaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/gamma")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetColorCorrectionLiftRequest generates requests for GetColorCorrectionLift
func NewGetColorCorrectionLiftRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/lift")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutColorCorrectionLiftRequest calls the generic PutColorCorrectionLift builder with application/json body
func NewPutColorCorrectionLiftRequest(server string, body PutColorCorrectionLiftJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutColorCorrectionLiftRequestWithBody(server, "application/json", bodyReader)
}

// NewPutColorCorrectionLiftRequestWithBody generates requests for PutColorCorrectionLift with any type of body
func NewPutColorCorrectionLiftRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/lift")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetColorCorrectionLumaContributionRequest generates requests for GetColorCorrectionLumaContribution
func NewGetColorCorrectionLumaContributionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/lumaContribution")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutColorCorrectionLumaContributionRequest calls the generic PutColorCorrectionLumaContribution builder with application/json body
func NewPutColorCorrectionLumaContributionRequest(server string, body PutColorCorrectionLumaContributionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutColorCorrectionLumaContributionRequestWithBody(server, "application/json", bodyReader)
}

// NewPutColorCorrectionLumaContributionRequestWithBody generates requests for PutColorCorrectionLumaContribution with any type of body
func NewPutColorCorrectionLumaContributionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/lumaContribution")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetColorCorrectionOffsetRequest generates requests for GetColorCorrectionOffset
func NewGetColorCorrectionOffsetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/offset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutColorCorrectionOffsetRequest calls the generic PutColorCorrectionOffset builder with application/json body
func NewPutColorCorrectionOffsetRequest(server string, body PutColorCorrectionOffsetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutColorCorrectionOffsetRequestWithBody(server, "application/json", bodyReader)
}

// NewPutColorCorrectionOffsetRequestWithBody generates requests for PutColorCorrectionOffset with any type of body
func NewPutColorCorrectionOffsetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/colorCorrection/offset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEventListRequest generates requests for GetEventList
func NewGetEventListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/event/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLensFocusRequest generates requests for GetLensFocus
func NewGetLensFocusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lens/focus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutLensFocusRequest calls the generic PutLensFocus builder with application/json body
func NewPutLensFocusRequest(server string, body PutLensFocusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLensFocusRequestWithBody(server, "application/json", bodyReader)
}

// NewPutLensFocusRequestWithBody generates requests for PutLensFocus with any type of body
func NewPutLensFocusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lens/focus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutLensFocusDoAutoFocusRequest generates requests for PutLensFocusDoAutoFocus
func NewPutLensFocusDoAutoFocusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lens/focus/doAutoFocus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLensIrisRequest generates requests for GetLensIris
func NewGetLensIrisRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lens/iris")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutLensIrisRequest calls the generic PutLensIris builder with application/json body
func NewPutLensIrisRequest(server string, body PutLensIrisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLensIrisRequestWithBody(server, "application/json", bodyReader)
}

// NewPutLensIrisRequestWithBody generates requests for PutLensIris with any type of body
func NewPutLensIrisRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lens/iris")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLensZoomRequest generates requests for GetLensZoom
func NewGetLensZoomRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lens/zoom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutLensZoomRequest calls the generic PutLensZoom builder with application/json body
func NewPutLensZoomRequest(server string, body PutLensZoomJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLensZoomRequestWithBody(server, "application/json", bodyReader)
}

// NewPutLensZoomRequestWithBody generates requests for PutLensZoom with any type of body
func NewPutLensZoomRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lens/zoom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMediaActiveRequest generates requests for GetMediaActive
func NewGetMediaActiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media/active")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMediaActiveRequest calls the generic PutMediaActive builder with application/json body
func NewPutMediaActiveRequest(server string, body PutMediaActiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMediaActiveRequestWithBody(server, "application/json", bodyReader)
}

// NewPutMediaActiveRequestWithBody generates requests for PutMediaActive with any type of body
func NewPutMediaActiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media/active")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMediaDevicesDoformatSupportedFilesystemsRequest generates requests for GetMediaDevicesDoformatSupportedFilesystems
func NewGetMediaDevicesDoformatSupportedFilesystemsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media/devices/doformatSupportedFilesystems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMediaDevicesDeviceNameRequest generates requests for GetMediaDevicesDeviceName
func NewGetMediaDevicesDeviceNameRequest(server string, deviceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceName", runtime.ParamLocationPath, deviceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMediaDevicesDeviceNameDoformatRequest generates requests for GetMediaDevicesDeviceNameDoformat
func NewGetMediaDevicesDeviceNameDoformatRequest(server string, deviceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceName", runtime.ParamLocationPath, deviceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media/devices/%s/doformat", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMediaDevicesDeviceNameDoformatRequest calls the generic PutMediaDevicesDeviceNameDoformat builder with application/json body
func NewPutMediaDevicesDeviceNameDoformatRequest(server string, deviceName string, body PutMediaDevicesDeviceNameDoformatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMediaDevicesDeviceNameDoformatRequestWithBody(server, deviceName, "application/json", bodyReader)
}

// NewPutMediaDevicesDeviceNameDoformatRequestWithBody generates requests for PutMediaDevicesDeviceNameDoformat with any type of body
func NewPutMediaDevicesDeviceNameDoformatRequestWithBody(server string, deviceName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceName", runtime.ParamLocationPath, deviceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media/devices/%s/doformat", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMediaWorkingsetRequest generates requests for GetMediaWorkingset
func NewGetMediaWorkingsetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media/workingset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPresetsRequest generates requests for GetPresets
func NewGetPresetsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/presets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPresetsRequestWithBody generates requests for PostPresets with any type of body
func NewPostPresetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/presets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPresetsActiveRequest generates requests for GetPresetsActive
func NewGetPresetsActiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/presets/active")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPresetsActiveRequest calls the generic PutPresetsActive builder with application/json body
func NewPutPresetsActiveRequest(server string, body PutPresetsActiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPresetsActiveRequestWithBody(server, "application/json", bodyReader)
}

// NewPutPresetsActiveRequestWithBody generates requests for PutPresetsActive with any type of body
func NewPutPresetsActiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/presets/active")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePresetsPresetNameRequest generates requests for DeletePresetsPresetName
func NewDeletePresetsPresetNameRequest(server string, presetName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "presetName", runtime.ParamLocationPath, presetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/presets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPresetsPresetNameRequest generates requests for GetPresetsPresetName
func NewGetPresetsPresetNameRequest(server string, presetName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "presetName", runtime.ParamLocationPath, presetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/presets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPresetsPresetNameRequest generates requests for PutPresetsPresetName
func NewPutPresetsPresetNameRequest(server string, presetName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "presetName", runtime.ParamLocationPath, presetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/presets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemRequest generates requests for GetSystem
func NewGetSystemRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemCodecFormatRequest generates requests for GetSystemCodecFormat
func NewGetSystemCodecFormatRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/codecFormat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSystemCodecFormatRequest calls the generic PutSystemCodecFormat builder with application/json body
func NewPutSystemCodecFormatRequest(server string, body PutSystemCodecFormatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSystemCodecFormatRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSystemCodecFormatRequestWithBody generates requests for PutSystemCodecFormat with any type of body
func NewPutSystemCodecFormatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/codecFormat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemFormatRequest generates requests for GetSystemFormat
func NewGetSystemFormatRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/format")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSystemFormatRequest calls the generic PutSystemFormat builder with application/json body
func NewPutSystemFormatRequest(server string, body PutSystemFormatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSystemFormatRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSystemFormatRequestWithBody generates requests for PutSystemFormat with any type of body
func NewPutSystemFormatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/format")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemSupportedCodecFormatsRequest generates requests for GetSystemSupportedCodecFormats
func NewGetSystemSupportedCodecFormatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/supportedCodecFormats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemSupportedFormatsRequest generates requests for GetSystemSupportedFormats
func NewGetSystemSupportedFormatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/supportedFormats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemSupportedVideoFormatsRequest generates requests for GetSystemSupportedVideoFormats
func NewGetSystemSupportedVideoFormatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/supportedVideoFormats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemVideoFormatRequest generates requests for GetSystemVideoFormat
func NewGetSystemVideoFormatRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/videoFormat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSystemVideoFormatRequest calls the generic PutSystemVideoFormat builder with application/json body
func NewPutSystemVideoFormatRequest(server string, body PutSystemVideoFormatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSystemVideoFormatRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSystemVideoFormatRequestWithBody generates requests for PutSystemVideoFormat with any type of body
func NewPutSystemVideoFormatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/videoFormat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTimelines0Request generates requests for DeleteTimelines0
func NewDeleteTimelines0Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timelines/0")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimelines0Request generates requests for GetTimelines0
func NewGetTimelines0Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timelines/0")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTimelines0AddRequest calls the generic PostTimelines0Add builder with application/json body
func NewPostTimelines0AddRequest(server string, body PostTimelines0AddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTimelines0AddRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTimelines0AddRequestWithBody generates requests for PostTimelines0Add with any type of body
func NewPostTimelines0AddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timelines/0/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTransports0Request generates requests for GetTransports0
func NewGetTransports0Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transports/0")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTransports0Request calls the generic PutTransports0 builder with application/json body
func NewPutTransports0Request(server string, body PutTransports0JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTransports0RequestWithBody(server, "application/json", bodyReader)
}

// NewPutTransports0RequestWithBody generates requests for PutTransports0 with any type of body
func NewPutTransports0RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transports/0")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTransports0PlayRequest generates requests for GetTransports0Play
func NewGetTransports0PlayRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transports/0/play")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTransports0PlayRequest generates requests for PutTransports0Play
func NewPutTransports0PlayRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transports/0/play")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransports0PlaybackRequest generates requests for GetTransports0Playback
func NewGetTransports0PlaybackRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transports/0/playback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTransports0PlaybackRequest calls the generic PutTransports0Playback builder with application/json body
func NewPutTransports0PlaybackRequest(server string, body PutTransports0PlaybackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTransports0PlaybackRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTransports0PlaybackRequestWithBody generates requests for PutTransports0Playback with any type of body
func NewPutTransports0PlaybackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transports/0/playback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTransports0RecordRequest generates requests for GetTransports0Record
func NewGetTransports0RecordRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transports/0/record")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTransports0RecordRequest calls the generic PutTransports0Record builder with application/json body
func NewPutTransports0RecordRequest(server string, body PutTransports0RecordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTransports0RecordRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTransports0RecordRequestWithBody generates requests for PutTransports0Record with any type of body
func NewPutTransports0RecordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transports/0/record")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTransports0StopRequest generates requests for GetTransports0Stop
func NewGetTransports0StopRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transports/0/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTransports0StopRequest generates requests for PutTransports0Stop
func NewPutTransports0StopRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transports/0/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransports0TimecodeRequest generates requests for GetTransports0Timecode
func NewGetTransports0TimecodeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transports/0/timecode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransports0TimecodeSourceRequest generates requests for GetTransports0TimecodeSource
func NewGetTransports0TimecodeSourceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transports/0/timecode/source")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideoAutoExposureRequest generates requests for GetVideoAutoExposure
func NewGetVideoAutoExposureRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/autoExposure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVideoAutoExposureRequest calls the generic PutVideoAutoExposure builder with application/json body
func NewPutVideoAutoExposureRequest(server string, body PutVideoAutoExposureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVideoAutoExposureRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVideoAutoExposureRequestWithBody generates requests for PutVideoAutoExposure with any type of body
func NewPutVideoAutoExposureRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/autoExposure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVideoGainRequest generates requests for GetVideoGain
func NewGetVideoGainRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/gain")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVideoGainRequest calls the generic PutVideoGain builder with application/json body
func NewPutVideoGainRequest(server string, body PutVideoGainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVideoGainRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVideoGainRequestWithBody generates requests for PutVideoGain with any type of body
func NewPutVideoGainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/gain")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVideoIsoRequest generates requests for GetVideoIso
func NewGetVideoIsoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/iso")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVideoIsoRequest calls the generic PutVideoIso builder with application/json body
func NewPutVideoIsoRequest(server string, body PutVideoIsoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVideoIsoRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVideoIsoRequestWithBody generates requests for PutVideoIso with any type of body
func NewPutVideoIsoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/iso")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVideoNdFilterRequest generates requests for GetVideoNdFilter
func NewGetVideoNdFilterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/ndFilter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVideoNdFilterRequest calls the generic PutVideoNdFilter builder with application/json body
func NewPutVideoNdFilterRequest(server string, body PutVideoNdFilterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVideoNdFilterRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVideoNdFilterRequestWithBody generates requests for PutVideoNdFilter with any type of body
func NewPutVideoNdFilterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/ndFilter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVideoNdFilterDisplayModeRequest generates requests for GetVideoNdFilterDisplayMode
func NewGetVideoNdFilterDisplayModeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/ndFilter/displayMode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVideoNdFilterDisplayModeRequest calls the generic PutVideoNdFilterDisplayMode builder with application/json body
func NewPutVideoNdFilterDisplayModeRequest(server string, body PutVideoNdFilterDisplayModeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVideoNdFilterDisplayModeRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVideoNdFilterDisplayModeRequestWithBody generates requests for PutVideoNdFilterDisplayMode with any type of body
func NewPutVideoNdFilterDisplayModeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/ndFilter/displayMode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVideoShutterRequest generates requests for GetVideoShutter
func NewGetVideoShutterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/shutter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVideoShutterRequest calls the generic PutVideoShutter builder with application/json body
func NewPutVideoShutterRequest(server string, body PutVideoShutterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVideoShutterRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVideoShutterRequestWithBody generates requests for PutVideoShutter with any type of body
func NewPutVideoShutterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/shutter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVideoWhiteBalanceRequest generates requests for GetVideoWhiteBalance
func NewGetVideoWhiteBalanceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/whiteBalance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVideoWhiteBalanceRequest calls the generic PutVideoWhiteBalance builder with application/json body
func NewPutVideoWhiteBalanceRequest(server string, body PutVideoWhiteBalanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVideoWhiteBalanceRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVideoWhiteBalanceRequestWithBody generates requests for PutVideoWhiteBalance with any type of body
func NewPutVideoWhiteBalanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/whiteBalance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVideoWhiteBalanceDoAutoRequest generates requests for PutVideoWhiteBalanceDoAuto
func NewPutVideoWhiteBalanceDoAutoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/whiteBalance/doAuto")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideoWhiteBalanceTintRequest generates requests for GetVideoWhiteBalanceTint
func NewGetVideoWhiteBalanceTintRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/whiteBalanceTint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVideoWhiteBalanceTintRequest calls the generic PutVideoWhiteBalanceTint builder with application/json body
func NewPutVideoWhiteBalanceTintRequest(server string, body PutVideoWhiteBalanceTintJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVideoWhiteBalanceTintRequestWithBody(server, "application/json", bodyReader)
}

// NewPutVideoWhiteBalanceTintRequestWithBody generates requests for PutVideoWhiteBalanceTint with any type of body
func NewPutVideoWhiteBalanceTintRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/video/whiteBalanceTint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAudioChannelChannelIndexAvailableWithResponse request
	GetAudioChannelChannelIndexAvailableWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexAvailableResponse, error)

	// GetAudioChannelChannelIndexInputWithResponse request
	GetAudioChannelChannelIndexInputWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexInputResponse, error)

	// PutAudioChannelChannelIndexInputWithBodyWithResponse request with any body
	PutAudioChannelChannelIndexInputWithBodyWithResponse(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexInputResponse, error)

	PutAudioChannelChannelIndexInputWithResponse(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexInputJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexInputResponse, error)

	// GetAudioChannelChannelIndexInputDescriptionWithResponse request
	GetAudioChannelChannelIndexInputDescriptionWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexInputDescriptionResponse, error)

	// GetAudioChannelChannelIndexLevelWithResponse request
	GetAudioChannelChannelIndexLevelWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexLevelResponse, error)

	// PutAudioChannelChannelIndexLevelWithBodyWithResponse request with any body
	PutAudioChannelChannelIndexLevelWithBodyWithResponse(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexLevelResponse, error)

	PutAudioChannelChannelIndexLevelWithResponse(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexLevelResponse, error)

	// GetAudioChannelChannelIndexLowCutFilterWithResponse request
	GetAudioChannelChannelIndexLowCutFilterWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexLowCutFilterResponse, error)

	// PutAudioChannelChannelIndexLowCutFilterWithBodyWithResponse request with any body
	PutAudioChannelChannelIndexLowCutFilterWithBodyWithResponse(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexLowCutFilterResponse, error)

	PutAudioChannelChannelIndexLowCutFilterWithResponse(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexLowCutFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexLowCutFilterResponse, error)

	// GetAudioChannelChannelIndexPaddingWithResponse request
	GetAudioChannelChannelIndexPaddingWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexPaddingResponse, error)

	// PutAudioChannelChannelIndexPaddingWithBodyWithResponse request with any body
	PutAudioChannelChannelIndexPaddingWithBodyWithResponse(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexPaddingResponse, error)

	PutAudioChannelChannelIndexPaddingWithResponse(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexPaddingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexPaddingResponse, error)

	// GetAudioChannelChannelIndexPhantomPowerWithResponse request
	GetAudioChannelChannelIndexPhantomPowerWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexPhantomPowerResponse, error)

	// PutAudioChannelChannelIndexPhantomPowerWithBodyWithResponse request with any body
	PutAudioChannelChannelIndexPhantomPowerWithBodyWithResponse(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexPhantomPowerResponse, error)

	PutAudioChannelChannelIndexPhantomPowerWithResponse(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexPhantomPowerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexPhantomPowerResponse, error)

	// GetAudioChannelChannelIndexSupportedInputsWithResponse request
	GetAudioChannelChannelIndexSupportedInputsWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexSupportedInputsResponse, error)

	// GetColorCorrectionColorWithResponse request
	GetColorCorrectionColorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionColorResponse, error)

	// PutColorCorrectionColorWithBodyWithResponse request with any body
	PutColorCorrectionColorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionColorResponse, error)

	PutColorCorrectionColorWithResponse(ctx context.Context, body PutColorCorrectionColorJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionColorResponse, error)

	// GetColorCorrectionContrastWithResponse request
	GetColorCorrectionContrastWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionContrastResponse, error)

	// PutColorCorrectionContrastWithBodyWithResponse request with any body
	PutColorCorrectionContrastWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionContrastResponse, error)

	PutColorCorrectionContrastWithResponse(ctx context.Context, body PutColorCorrectionContrastJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionContrastResponse, error)

	// GetColorCorrectionGainWithResponse request
	GetColorCorrectionGainWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionGainResponse, error)

	// PutColorCorrectionGainWithBodyWithResponse request with any body
	PutColorCorrectionGainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionGainResponse, error)

	PutColorCorrectionGainWithResponse(ctx context.Context, body PutColorCorrectionGainJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionGainResponse, error)

	// GetColorCorrectionGammaWithResponse request
	GetColorCorrectionGammaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionGammaResponse, error)

	// PutColorCorrectionGammaWithBodyWithResponse request with any body
	PutColorCorrectionGammaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionGammaResponse, error)

	PutColorCorrectionGammaWithResponse(ctx context.Context, body PutColorCorrectionGammaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionGammaResponse, error)

	// GetColorCorrectionLiftWithResponse request
	GetColorCorrectionLiftWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionLiftResponse, error)

	// PutColorCorrectionLiftWithBodyWithResponse request with any body
	PutColorCorrectionLiftWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionLiftResponse, error)

	PutColorCorrectionLiftWithResponse(ctx context.Context, body PutColorCorrectionLiftJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionLiftResponse, error)

	// GetColorCorrectionLumaContributionWithResponse request
	GetColorCorrectionLumaContributionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionLumaContributionResponse, error)

	// PutColorCorrectionLumaContributionWithBodyWithResponse request with any body
	PutColorCorrectionLumaContributionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionLumaContributionResponse, error)

	PutColorCorrectionLumaContributionWithResponse(ctx context.Context, body PutColorCorrectionLumaContributionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionLumaContributionResponse, error)

	// GetColorCorrectionOffsetWithResponse request
	GetColorCorrectionOffsetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionOffsetResponse, error)

	// PutColorCorrectionOffsetWithBodyWithResponse request with any body
	PutColorCorrectionOffsetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionOffsetResponse, error)

	PutColorCorrectionOffsetWithResponse(ctx context.Context, body PutColorCorrectionOffsetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionOffsetResponse, error)

	// GetEventListWithResponse request
	GetEventListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEventListResponse, error)

	// GetLensFocusWithResponse request
	GetLensFocusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLensFocusResponse, error)

	// PutLensFocusWithBodyWithResponse request with any body
	PutLensFocusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLensFocusResponse, error)

	PutLensFocusWithResponse(ctx context.Context, body PutLensFocusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLensFocusResponse, error)

	// PutLensFocusDoAutoFocusWithResponse request
	PutLensFocusDoAutoFocusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutLensFocusDoAutoFocusResponse, error)

	// GetLensIrisWithResponse request
	GetLensIrisWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLensIrisResponse, error)

	// PutLensIrisWithBodyWithResponse request with any body
	PutLensIrisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLensIrisResponse, error)

	PutLensIrisWithResponse(ctx context.Context, body PutLensIrisJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLensIrisResponse, error)

	// GetLensZoomWithResponse request
	GetLensZoomWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLensZoomResponse, error)

	// PutLensZoomWithBodyWithResponse request with any body
	PutLensZoomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLensZoomResponse, error)

	PutLensZoomWithResponse(ctx context.Context, body PutLensZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLensZoomResponse, error)

	// GetMediaActiveWithResponse request
	GetMediaActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMediaActiveResponse, error)

	// PutMediaActiveWithBodyWithResponse request with any body
	PutMediaActiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMediaActiveResponse, error)

	PutMediaActiveWithResponse(ctx context.Context, body PutMediaActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMediaActiveResponse, error)

	// GetMediaDevicesDoformatSupportedFilesystemsWithResponse request
	GetMediaDevicesDoformatSupportedFilesystemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMediaDevicesDoformatSupportedFilesystemsResponse, error)

	// GetMediaDevicesDeviceNameWithResponse request
	GetMediaDevicesDeviceNameWithResponse(ctx context.Context, deviceName string, reqEditors ...RequestEditorFn) (*GetMediaDevicesDeviceNameResponse, error)

	// GetMediaDevicesDeviceNameDoformatWithResponse request
	GetMediaDevicesDeviceNameDoformatWithResponse(ctx context.Context, deviceName string, reqEditors ...RequestEditorFn) (*GetMediaDevicesDeviceNameDoformatResponse, error)

	// PutMediaDevicesDeviceNameDoformatWithBodyWithResponse request with any body
	PutMediaDevicesDeviceNameDoformatWithBodyWithResponse(ctx context.Context, deviceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMediaDevicesDeviceNameDoformatResponse, error)

	PutMediaDevicesDeviceNameDoformatWithResponse(ctx context.Context, deviceName string, body PutMediaDevicesDeviceNameDoformatJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMediaDevicesDeviceNameDoformatResponse, error)

	// GetMediaWorkingsetWithResponse request
	GetMediaWorkingsetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMediaWorkingsetResponse, error)

	// GetPresetsWithResponse request
	GetPresetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPresetsResponse, error)

	// PostPresetsWithBodyWithResponse request with any body
	PostPresetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPresetsResponse, error)

	// GetPresetsActiveWithResponse request
	GetPresetsActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPresetsActiveResponse, error)

	// PutPresetsActiveWithBodyWithResponse request with any body
	PutPresetsActiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPresetsActiveResponse, error)

	PutPresetsActiveWithResponse(ctx context.Context, body PutPresetsActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPresetsActiveResponse, error)

	// DeletePresetsPresetNameWithResponse request
	DeletePresetsPresetNameWithResponse(ctx context.Context, presetName string, reqEditors ...RequestEditorFn) (*DeletePresetsPresetNameResponse, error)

	// GetPresetsPresetNameWithResponse request
	GetPresetsPresetNameWithResponse(ctx context.Context, presetName string, reqEditors ...RequestEditorFn) (*GetPresetsPresetNameResponse, error)

	// PutPresetsPresetNameWithResponse request
	PutPresetsPresetNameWithResponse(ctx context.Context, presetName string, reqEditors ...RequestEditorFn) (*PutPresetsPresetNameResponse, error)

	// GetSystemWithResponse request
	GetSystemWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemResponse, error)

	// GetSystemCodecFormatWithResponse request
	GetSystemCodecFormatWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemCodecFormatResponse, error)

	// PutSystemCodecFormatWithBodyWithResponse request with any body
	PutSystemCodecFormatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemCodecFormatResponse, error)

	PutSystemCodecFormatWithResponse(ctx context.Context, body PutSystemCodecFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemCodecFormatResponse, error)

	// GetSystemFormatWithResponse request
	GetSystemFormatWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemFormatResponse, error)

	// PutSystemFormatWithBodyWithResponse request with any body
	PutSystemFormatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemFormatResponse, error)

	PutSystemFormatWithResponse(ctx context.Context, body PutSystemFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemFormatResponse, error)

	// GetSystemSupportedCodecFormatsWithResponse request
	GetSystemSupportedCodecFormatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemSupportedCodecFormatsResponse, error)

	// GetSystemSupportedFormatsWithResponse request
	GetSystemSupportedFormatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemSupportedFormatsResponse, error)

	// GetSystemSupportedVideoFormatsWithResponse request
	GetSystemSupportedVideoFormatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemSupportedVideoFormatsResponse, error)

	// GetSystemVideoFormatWithResponse request
	GetSystemVideoFormatWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemVideoFormatResponse, error)

	// PutSystemVideoFormatWithBodyWithResponse request with any body
	PutSystemVideoFormatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemVideoFormatResponse, error)

	PutSystemVideoFormatWithResponse(ctx context.Context, body PutSystemVideoFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemVideoFormatResponse, error)

	// DeleteTimelines0WithResponse request
	DeleteTimelines0WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteTimelines0Response, error)

	// GetTimelines0WithResponse request
	GetTimelines0WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTimelines0Response, error)

	// PostTimelines0AddWithBodyWithResponse request with any body
	PostTimelines0AddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTimelines0AddResponse, error)

	PostTimelines0AddWithResponse(ctx context.Context, body PostTimelines0AddJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTimelines0AddResponse, error)

	// GetTransports0WithResponse request
	GetTransports0WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0Response, error)

	// PutTransports0WithBodyWithResponse request with any body
	PutTransports0WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTransports0Response, error)

	PutTransports0WithResponse(ctx context.Context, body PutTransports0JSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransports0Response, error)

	// GetTransports0PlayWithResponse request
	GetTransports0PlayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0PlayResponse, error)

	// PutTransports0PlayWithResponse request
	PutTransports0PlayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutTransports0PlayResponse, error)

	// GetTransports0PlaybackWithResponse request
	GetTransports0PlaybackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0PlaybackResponse, error)

	// PutTransports0PlaybackWithBodyWithResponse request with any body
	PutTransports0PlaybackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTransports0PlaybackResponse, error)

	PutTransports0PlaybackWithResponse(ctx context.Context, body PutTransports0PlaybackJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransports0PlaybackResponse, error)

	// GetTransports0RecordWithResponse request
	GetTransports0RecordWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0RecordResponse, error)

	// PutTransports0RecordWithBodyWithResponse request with any body
	PutTransports0RecordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTransports0RecordResponse, error)

	PutTransports0RecordWithResponse(ctx context.Context, body PutTransports0RecordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransports0RecordResponse, error)

	// GetTransports0StopWithResponse request
	GetTransports0StopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0StopResponse, error)

	// PutTransports0StopWithResponse request
	PutTransports0StopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutTransports0StopResponse, error)

	// GetTransports0TimecodeWithResponse request
	GetTransports0TimecodeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0TimecodeResponse, error)

	// GetTransports0TimecodeSourceWithResponse request
	GetTransports0TimecodeSourceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0TimecodeSourceResponse, error)

	// GetVideoAutoExposureWithResponse request
	GetVideoAutoExposureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoAutoExposureResponse, error)

	// PutVideoAutoExposureWithBodyWithResponse request with any body
	PutVideoAutoExposureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoAutoExposureResponse, error)

	PutVideoAutoExposureWithResponse(ctx context.Context, body PutVideoAutoExposureJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoAutoExposureResponse, error)

	// GetVideoGainWithResponse request
	GetVideoGainWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoGainResponse, error)

	// PutVideoGainWithBodyWithResponse request with any body
	PutVideoGainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoGainResponse, error)

	PutVideoGainWithResponse(ctx context.Context, body PutVideoGainJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoGainResponse, error)

	// GetVideoIsoWithResponse request
	GetVideoIsoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoIsoResponse, error)

	// PutVideoIsoWithBodyWithResponse request with any body
	PutVideoIsoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoIsoResponse, error)

	PutVideoIsoWithResponse(ctx context.Context, body PutVideoIsoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoIsoResponse, error)

	// GetVideoNdFilterWithResponse request
	GetVideoNdFilterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoNdFilterResponse, error)

	// PutVideoNdFilterWithBodyWithResponse request with any body
	PutVideoNdFilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoNdFilterResponse, error)

	PutVideoNdFilterWithResponse(ctx context.Context, body PutVideoNdFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoNdFilterResponse, error)

	// GetVideoNdFilterDisplayModeWithResponse request
	GetVideoNdFilterDisplayModeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoNdFilterDisplayModeResponse, error)

	// PutVideoNdFilterDisplayModeWithBodyWithResponse request with any body
	PutVideoNdFilterDisplayModeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoNdFilterDisplayModeResponse, error)

	PutVideoNdFilterDisplayModeWithResponse(ctx context.Context, body PutVideoNdFilterDisplayModeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoNdFilterDisplayModeResponse, error)

	// GetVideoShutterWithResponse request
	GetVideoShutterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoShutterResponse, error)

	// PutVideoShutterWithBodyWithResponse request with any body
	PutVideoShutterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoShutterResponse, error)

	PutVideoShutterWithResponse(ctx context.Context, body PutVideoShutterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoShutterResponse, error)

	// GetVideoWhiteBalanceWithResponse request
	GetVideoWhiteBalanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoWhiteBalanceResponse, error)

	// PutVideoWhiteBalanceWithBodyWithResponse request with any body
	PutVideoWhiteBalanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoWhiteBalanceResponse, error)

	PutVideoWhiteBalanceWithResponse(ctx context.Context, body PutVideoWhiteBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoWhiteBalanceResponse, error)

	// PutVideoWhiteBalanceDoAutoWithResponse request
	PutVideoWhiteBalanceDoAutoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutVideoWhiteBalanceDoAutoResponse, error)

	// GetVideoWhiteBalanceTintWithResponse request
	GetVideoWhiteBalanceTintWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoWhiteBalanceTintResponse, error)

	// PutVideoWhiteBalanceTintWithBodyWithResponse request with any body
	PutVideoWhiteBalanceTintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoWhiteBalanceTintResponse, error)

	PutVideoWhiteBalanceTintWithResponse(ctx context.Context, body PutVideoWhiteBalanceTintJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoWhiteBalanceTintResponse, error)
}

type GetAudioChannelChannelIndexAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Available
}

// Status returns HTTPResponse.Status
func (r GetAudioChannelChannelIndexAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAudioChannelChannelIndexAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAudioChannelChannelIndexInputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Input
}

// Status returns HTTPResponse.Status
func (r GetAudioChannelChannelIndexInputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAudioChannelChannelIndexInputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAudioChannelChannelIndexInputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAudioChannelChannelIndexInputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAudioChannelChannelIndexInputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAudioChannelChannelIndexInputDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Description
}

// Status returns HTTPResponse.Status
func (r GetAudioChannelChannelIndexInputDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAudioChannelChannelIndexInputDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAudioChannelChannelIndexLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Level
}

// Status returns HTTPResponse.Status
func (r GetAudioChannelChannelIndexLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAudioChannelChannelIndexLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAudioChannelChannelIndexLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAudioChannelChannelIndexLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAudioChannelChannelIndexLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAudioChannelChannelIndexLowCutFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LowCutFilter
}

// Status returns HTTPResponse.Status
func (r GetAudioChannelChannelIndexLowCutFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAudioChannelChannelIndexLowCutFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAudioChannelChannelIndexLowCutFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAudioChannelChannelIndexLowCutFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAudioChannelChannelIndexLowCutFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAudioChannelChannelIndexPaddingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Padding
}

// Status returns HTTPResponse.Status
func (r GetAudioChannelChannelIndexPaddingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAudioChannelChannelIndexPaddingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAudioChannelChannelIndexPaddingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAudioChannelChannelIndexPaddingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAudioChannelChannelIndexPaddingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAudioChannelChannelIndexPhantomPowerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PhantomPower
}

// Status returns HTTPResponse.Status
func (r GetAudioChannelChannelIndexPhantomPowerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAudioChannelChannelIndexPhantomPowerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAudioChannelChannelIndexPhantomPowerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAudioChannelChannelIndexPhantomPowerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAudioChannelChannelIndexPhantomPowerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAudioChannelChannelIndexSupportedInputsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SupportedInputs
}

// Status returns HTTPResponse.Status
func (r GetAudioChannelChannelIndexSupportedInputsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAudioChannelChannelIndexSupportedInputsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColorCorrectionColorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Color
}

// Status returns HTTPResponse.Status
func (r GetColorCorrectionColorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColorCorrectionColorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutColorCorrectionColorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutColorCorrectionColorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutColorCorrectionColorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColorCorrectionContrastResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contrast
}

// Status returns HTTPResponse.Status
func (r GetColorCorrectionContrastResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColorCorrectionContrastResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutColorCorrectionContrastResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutColorCorrectionContrastResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutColorCorrectionContrastResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColorCorrectionGainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Gain
}

// Status returns HTTPResponse.Status
func (r GetColorCorrectionGainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColorCorrectionGainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutColorCorrectionGainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutColorCorrectionGainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutColorCorrectionGainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColorCorrectionGammaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Gamma
}

// Status returns HTTPResponse.Status
func (r GetColorCorrectionGammaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColorCorrectionGammaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutColorCorrectionGammaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutColorCorrectionGammaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutColorCorrectionGammaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColorCorrectionLiftResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Lift
}

// Status returns HTTPResponse.Status
func (r GetColorCorrectionLiftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColorCorrectionLiftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutColorCorrectionLiftResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutColorCorrectionLiftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutColorCorrectionLiftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColorCorrectionLumaContributionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LumaContribution
}

// Status returns HTTPResponse.Status
func (r GetColorCorrectionLumaContributionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColorCorrectionLumaContributionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutColorCorrectionLumaContributionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutColorCorrectionLumaContributionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutColorCorrectionLumaContributionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColorCorrectionOffsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Offset
}

// Status returns HTTPResponse.Status
func (r GetColorCorrectionOffsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColorCorrectionOffsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutColorCorrectionOffsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutColorCorrectionOffsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutColorCorrectionOffsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventsList
}

// Status returns HTTPResponse.Status
func (r GetEventListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLensFocusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Focus Normalised value
		Focus *Normalised `json:"focus,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLensFocusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLensFocusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLensFocusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutLensFocusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLensFocusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLensFocusDoAutoFocusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutLensFocusDoAutoFocusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLensFocusDoAutoFocusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLensIrisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApertureNumber Aperture number
		ApertureNumber *ApertureNumber `json:"apertureNumber,omitempty"`

		// ApertureStop Aperture stop value
		ApertureStop *ApertureStop `json:"apertureStop,omitempty"`

		// ContinuousApertureAutoExposure Is Aperture controlled by auto exposure
		ContinuousApertureAutoExposure *bool `json:"continuousApertureAutoExposure,omitempty"`

		// Normalised Normalised value
		Normalised *Normalised `json:"normalised,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLensIrisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLensIrisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLensIrisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutLensIrisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLensIrisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLensZoomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// FocalLength Focal length in mm
		FocalLength *FocalLength `json:"focalLength,omitempty"`

		// Normalised Normalised value
		Normalised *Normalised `json:"normalised,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLensZoomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLensZoomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLensZoomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutLensZoomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLensZoomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMediaActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActiveMedia
}

// Status returns HTTPResponse.Status
func (r GetMediaActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMediaActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutMediaActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMediaActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMediaDevicesDoformatSupportedFilesystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DoFormatSupportedFilesystems
}

// Status returns HTTPResponse.Status
func (r GetMediaDevicesDoformatSupportedFilesystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaDevicesDoformatSupportedFilesystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMediaDevicesDeviceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MediaDeviceInformation
}

// Status returns HTTPResponse.Status
func (r GetMediaDevicesDeviceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaDevicesDeviceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMediaDevicesDeviceNameDoformatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// DeviceName Internal device name of this media device
		DeviceName *string `json:"deviceName,omitempty"`

		// Key The key used to format this device, it must be fetched with the GET request and then provided back with a PUT request
		Key *FormatKey `json:"key,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMediaDevicesDeviceNameDoformatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaDevicesDeviceNameDoformatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMediaDevicesDeviceNameDoformatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutMediaDevicesDeviceNameDoformatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMediaDevicesDeviceNameDoformatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMediaWorkingsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workingset
}

// Status returns HTTPResponse.Status
func (r GetMediaWorkingsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaWorkingsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPresetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PresetList
}

// Status returns HTTPResponse.Status
func (r GetPresetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPresetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPresetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostPresetResponse
}

// Status returns HTTPResponse.Status
func (r PostPresetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPresetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPresetsActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivePreset
}

// Status returns HTTPResponse.Status
func (r GetPresetsActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPresetsActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPresetsActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r PutPresetsActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPresetsActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePresetsPresetNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r DeletePresetsPresetNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePresetsPresetNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPresetsPresetNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPresetsPresetNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPresetsPresetNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPresetsPresetNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r PutPresetsPresetNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPresetsPresetNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemResponse
}

// Status returns HTTPResponse.Status
func (r GetSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemCodecFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CodecFormat
}

// Status returns HTTPResponse.Status
func (r GetSystemCodecFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemCodecFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSystemCodecFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSystemCodecFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSystemCodecFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Format
}

// Status returns HTTPResponse.Status
func (r GetSystemFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSystemFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSystemFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSystemFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemSupportedCodecFormatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SupportedCodecFormats
}

// Status returns HTTPResponse.Status
func (r GetSystemSupportedCodecFormatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemSupportedCodecFormatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemSupportedFormatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SupportedFormats
}

// Status returns HTTPResponse.Status
func (r GetSystemSupportedFormatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemSupportedFormatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemSupportedVideoFormatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SupportedVideoFormats
}

// Status returns HTTPResponse.Status
func (r GetSystemSupportedVideoFormatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemSupportedVideoFormatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemVideoFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetVideoFormat
}

// Status returns HTTPResponse.Status
func (r GetSystemVideoFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemVideoFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSystemVideoFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSystemVideoFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSystemVideoFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTimelines0Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTimelines0Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTimelines0Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimelines0Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Timeline
}

// Status returns HTTPResponse.Status
func (r GetTimelines0Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimelines0Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTimelines0AddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTimelines0AddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTimelines0AddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransports0Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransportResponse
}

// Status returns HTTPResponse.Status
func (r GetTransports0Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransports0Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTransports0Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutTransports0Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTransports0Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransports0PlayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r GetTransports0PlayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransports0PlayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTransports0PlayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutTransports0PlayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTransports0PlayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransports0PlaybackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Playback
}

// Status returns HTTPResponse.Status
func (r GetTransports0PlaybackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransports0PlaybackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTransports0PlaybackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutTransports0PlaybackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTransports0PlaybackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransports0RecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRecord
}

// Status returns HTTPResponse.Status
func (r GetTransports0RecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransports0RecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTransports0RecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutTransports0RecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTransports0RecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransports0StopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r GetTransports0StopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransports0StopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTransports0StopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutTransports0StopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTransports0StopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransports0TimecodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Timecode
}

// Status returns HTTPResponse.Status
func (r GetTransports0TimecodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransports0TimecodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransports0TimecodeSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimecodeSource
}

// Status returns HTTPResponse.Status
func (r GetTransports0TimecodeSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransports0TimecodeSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideoAutoExposureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Mode Auto exposure mode
		Mode *AutoExposureMode `json:"mode,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVideoAutoExposureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideoAutoExposureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVideoAutoExposureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVideoAutoExposureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVideoAutoExposureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideoGainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Gain Current gain value in decibels
		Gain *int `json:"gain,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVideoGainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideoGainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVideoGainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVideoGainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVideoGainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideoIsoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Iso Current ISO value
		Iso *int `json:"iso,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVideoIsoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideoIsoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVideoIsoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVideoIsoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVideoIsoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideoNdFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Stop Current filter power (fStop)
		Stop *float32 `json:"stop,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVideoNdFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideoNdFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVideoNdFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVideoNdFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVideoNdFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideoNdFilterDisplayModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DisplayMode *NdFilterDisplayMode `json:"displayMode,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVideoNdFilterDisplayModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideoNdFilterDisplayModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVideoNdFilterDisplayModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVideoNdFilterDisplayModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVideoNdFilterDisplayModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideoShutterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ContinuousShutterAutoExposure Is shutter controlled by auto exposure
		ContinuousShutterAutoExposure *bool `json:"continuousShutterAutoExposure,omitempty"`

		// ShutterAngle Shutter angle
		ShutterAngle *ShutterAngle `json:"shutterAngle,omitempty"`

		// ShutterSpeed Shutter speed value in fractions of a second (minimum is sensor frame rate)
		ShutterSpeed *ShutterSpeed `json:"shutterSpeed,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVideoShutterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideoShutterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVideoShutterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVideoShutterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVideoShutterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideoWhiteBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// WhiteBalance Current white balance
		WhiteBalance *int `json:"whiteBalance,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVideoWhiteBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideoWhiteBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVideoWhiteBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVideoWhiteBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVideoWhiteBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVideoWhiteBalanceDoAutoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVideoWhiteBalanceDoAutoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVideoWhiteBalanceDoAutoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideoWhiteBalanceTintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// WhiteBalanceTint Current white balance tint
		WhiteBalanceTint *int `json:"whiteBalanceTint,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVideoWhiteBalanceTintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideoWhiteBalanceTintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVideoWhiteBalanceTintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVideoWhiteBalanceTintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVideoWhiteBalanceTintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAudioChannelChannelIndexAvailableWithResponse request returning *GetAudioChannelChannelIndexAvailableResponse
func (c *ClientWithResponses) GetAudioChannelChannelIndexAvailableWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexAvailableResponse, error) {
	rsp, err := c.GetAudioChannelChannelIndexAvailable(ctx, channelIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAudioChannelChannelIndexAvailableResponse(rsp)
}

// GetAudioChannelChannelIndexInputWithResponse request returning *GetAudioChannelChannelIndexInputResponse
func (c *ClientWithResponses) GetAudioChannelChannelIndexInputWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexInputResponse, error) {
	rsp, err := c.GetAudioChannelChannelIndexInput(ctx, channelIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAudioChannelChannelIndexInputResponse(rsp)
}

// PutAudioChannelChannelIndexInputWithBodyWithResponse request with arbitrary body returning *PutAudioChannelChannelIndexInputResponse
func (c *ClientWithResponses) PutAudioChannelChannelIndexInputWithBodyWithResponse(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexInputResponse, error) {
	rsp, err := c.PutAudioChannelChannelIndexInputWithBody(ctx, channelIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAudioChannelChannelIndexInputResponse(rsp)
}

func (c *ClientWithResponses) PutAudioChannelChannelIndexInputWithResponse(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexInputJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexInputResponse, error) {
	rsp, err := c.PutAudioChannelChannelIndexInput(ctx, channelIndex, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAudioChannelChannelIndexInputResponse(rsp)
}

// GetAudioChannelChannelIndexInputDescriptionWithResponse request returning *GetAudioChannelChannelIndexInputDescriptionResponse
func (c *ClientWithResponses) GetAudioChannelChannelIndexInputDescriptionWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexInputDescriptionResponse, error) {
	rsp, err := c.GetAudioChannelChannelIndexInputDescription(ctx, channelIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAudioChannelChannelIndexInputDescriptionResponse(rsp)
}

// GetAudioChannelChannelIndexLevelWithResponse request returning *GetAudioChannelChannelIndexLevelResponse
func (c *ClientWithResponses) GetAudioChannelChannelIndexLevelWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexLevelResponse, error) {
	rsp, err := c.GetAudioChannelChannelIndexLevel(ctx, channelIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAudioChannelChannelIndexLevelResponse(rsp)
}

// PutAudioChannelChannelIndexLevelWithBodyWithResponse request with arbitrary body returning *PutAudioChannelChannelIndexLevelResponse
func (c *ClientWithResponses) PutAudioChannelChannelIndexLevelWithBodyWithResponse(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexLevelResponse, error) {
	rsp, err := c.PutAudioChannelChannelIndexLevelWithBody(ctx, channelIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAudioChannelChannelIndexLevelResponse(rsp)
}

func (c *ClientWithResponses) PutAudioChannelChannelIndexLevelWithResponse(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexLevelResponse, error) {
	rsp, err := c.PutAudioChannelChannelIndexLevel(ctx, channelIndex, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAudioChannelChannelIndexLevelResponse(rsp)
}

// GetAudioChannelChannelIndexLowCutFilterWithResponse request returning *GetAudioChannelChannelIndexLowCutFilterResponse
func (c *ClientWithResponses) GetAudioChannelChannelIndexLowCutFilterWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexLowCutFilterResponse, error) {
	rsp, err := c.GetAudioChannelChannelIndexLowCutFilter(ctx, channelIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAudioChannelChannelIndexLowCutFilterResponse(rsp)
}

// PutAudioChannelChannelIndexLowCutFilterWithBodyWithResponse request with arbitrary body returning *PutAudioChannelChannelIndexLowCutFilterResponse
func (c *ClientWithResponses) PutAudioChannelChannelIndexLowCutFilterWithBodyWithResponse(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexLowCutFilterResponse, error) {
	rsp, err := c.PutAudioChannelChannelIndexLowCutFilterWithBody(ctx, channelIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAudioChannelChannelIndexLowCutFilterResponse(rsp)
}

func (c *ClientWithResponses) PutAudioChannelChannelIndexLowCutFilterWithResponse(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexLowCutFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexLowCutFilterResponse, error) {
	rsp, err := c.PutAudioChannelChannelIndexLowCutFilter(ctx, channelIndex, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAudioChannelChannelIndexLowCutFilterResponse(rsp)
}

// GetAudioChannelChannelIndexPaddingWithResponse request returning *GetAudioChannelChannelIndexPaddingResponse
func (c *ClientWithResponses) GetAudioChannelChannelIndexPaddingWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexPaddingResponse, error) {
	rsp, err := c.GetAudioChannelChannelIndexPadding(ctx, channelIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAudioChannelChannelIndexPaddingResponse(rsp)
}

// PutAudioChannelChannelIndexPaddingWithBodyWithResponse request with arbitrary body returning *PutAudioChannelChannelIndexPaddingResponse
func (c *ClientWithResponses) PutAudioChannelChannelIndexPaddingWithBodyWithResponse(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexPaddingResponse, error) {
	rsp, err := c.PutAudioChannelChannelIndexPaddingWithBody(ctx, channelIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAudioChannelChannelIndexPaddingResponse(rsp)
}

func (c *ClientWithResponses) PutAudioChannelChannelIndexPaddingWithResponse(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexPaddingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexPaddingResponse, error) {
	rsp, err := c.PutAudioChannelChannelIndexPadding(ctx, channelIndex, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAudioChannelChannelIndexPaddingResponse(rsp)
}

// GetAudioChannelChannelIndexPhantomPowerWithResponse request returning *GetAudioChannelChannelIndexPhantomPowerResponse
func (c *ClientWithResponses) GetAudioChannelChannelIndexPhantomPowerWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexPhantomPowerResponse, error) {
	rsp, err := c.GetAudioChannelChannelIndexPhantomPower(ctx, channelIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAudioChannelChannelIndexPhantomPowerResponse(rsp)
}

// PutAudioChannelChannelIndexPhantomPowerWithBodyWithResponse request with arbitrary body returning *PutAudioChannelChannelIndexPhantomPowerResponse
func (c *ClientWithResponses) PutAudioChannelChannelIndexPhantomPowerWithBodyWithResponse(ctx context.Context, channelIndex int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexPhantomPowerResponse, error) {
	rsp, err := c.PutAudioChannelChannelIndexPhantomPowerWithBody(ctx, channelIndex, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAudioChannelChannelIndexPhantomPowerResponse(rsp)
}

func (c *ClientWithResponses) PutAudioChannelChannelIndexPhantomPowerWithResponse(ctx context.Context, channelIndex int, body PutAudioChannelChannelIndexPhantomPowerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAudioChannelChannelIndexPhantomPowerResponse, error) {
	rsp, err := c.PutAudioChannelChannelIndexPhantomPower(ctx, channelIndex, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAudioChannelChannelIndexPhantomPowerResponse(rsp)
}

// GetAudioChannelChannelIndexSupportedInputsWithResponse request returning *GetAudioChannelChannelIndexSupportedInputsResponse
func (c *ClientWithResponses) GetAudioChannelChannelIndexSupportedInputsWithResponse(ctx context.Context, channelIndex int, reqEditors ...RequestEditorFn) (*GetAudioChannelChannelIndexSupportedInputsResponse, error) {
	rsp, err := c.GetAudioChannelChannelIndexSupportedInputs(ctx, channelIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAudioChannelChannelIndexSupportedInputsResponse(rsp)
}

// GetColorCorrectionColorWithResponse request returning *GetColorCorrectionColorResponse
func (c *ClientWithResponses) GetColorCorrectionColorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionColorResponse, error) {
	rsp, err := c.GetColorCorrectionColor(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColorCorrectionColorResponse(rsp)
}

// PutColorCorrectionColorWithBodyWithResponse request with arbitrary body returning *PutColorCorrectionColorResponse
func (c *ClientWithResponses) PutColorCorrectionColorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionColorResponse, error) {
	rsp, err := c.PutColorCorrectionColorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionColorResponse(rsp)
}

func (c *ClientWithResponses) PutColorCorrectionColorWithResponse(ctx context.Context, body PutColorCorrectionColorJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionColorResponse, error) {
	rsp, err := c.PutColorCorrectionColor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionColorResponse(rsp)
}

// GetColorCorrectionContrastWithResponse request returning *GetColorCorrectionContrastResponse
func (c *ClientWithResponses) GetColorCorrectionContrastWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionContrastResponse, error) {
	rsp, err := c.GetColorCorrectionContrast(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColorCorrectionContrastResponse(rsp)
}

// PutColorCorrectionContrastWithBodyWithResponse request with arbitrary body returning *PutColorCorrectionContrastResponse
func (c *ClientWithResponses) PutColorCorrectionContrastWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionContrastResponse, error) {
	rsp, err := c.PutColorCorrectionContrastWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionContrastResponse(rsp)
}

func (c *ClientWithResponses) PutColorCorrectionContrastWithResponse(ctx context.Context, body PutColorCorrectionContrastJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionContrastResponse, error) {
	rsp, err := c.PutColorCorrectionContrast(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionContrastResponse(rsp)
}

// GetColorCorrectionGainWithResponse request returning *GetColorCorrectionGainResponse
func (c *ClientWithResponses) GetColorCorrectionGainWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionGainResponse, error) {
	rsp, err := c.GetColorCorrectionGain(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColorCorrectionGainResponse(rsp)
}

// PutColorCorrectionGainWithBodyWithResponse request with arbitrary body returning *PutColorCorrectionGainResponse
func (c *ClientWithResponses) PutColorCorrectionGainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionGainResponse, error) {
	rsp, err := c.PutColorCorrectionGainWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionGainResponse(rsp)
}

func (c *ClientWithResponses) PutColorCorrectionGainWithResponse(ctx context.Context, body PutColorCorrectionGainJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionGainResponse, error) {
	rsp, err := c.PutColorCorrectionGain(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionGainResponse(rsp)
}

// GetColorCorrectionGammaWithResponse request returning *GetColorCorrectionGammaResponse
func (c *ClientWithResponses) GetColorCorrectionGammaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionGammaResponse, error) {
	rsp, err := c.GetColorCorrectionGamma(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColorCorrectionGammaResponse(rsp)
}

// PutColorCorrectionGammaWithBodyWithResponse request with arbitrary body returning *PutColorCorrectionGammaResponse
func (c *ClientWithResponses) PutColorCorrectionGammaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionGammaResponse, error) {
	rsp, err := c.PutColorCorrectionGammaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionGammaResponse(rsp)
}

func (c *ClientWithResponses) PutColorCorrectionGammaWithResponse(ctx context.Context, body PutColorCorrectionGammaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionGammaResponse, error) {
	rsp, err := c.PutColorCorrectionGamma(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionGammaResponse(rsp)
}

// GetColorCorrectionLiftWithResponse request returning *GetColorCorrectionLiftResponse
func (c *ClientWithResponses) GetColorCorrectionLiftWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionLiftResponse, error) {
	rsp, err := c.GetColorCorrectionLift(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColorCorrectionLiftResponse(rsp)
}

// PutColorCorrectionLiftWithBodyWithResponse request with arbitrary body returning *PutColorCorrectionLiftResponse
func (c *ClientWithResponses) PutColorCorrectionLiftWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionLiftResponse, error) {
	rsp, err := c.PutColorCorrectionLiftWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionLiftResponse(rsp)
}

func (c *ClientWithResponses) PutColorCorrectionLiftWithResponse(ctx context.Context, body PutColorCorrectionLiftJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionLiftResponse, error) {
	rsp, err := c.PutColorCorrectionLift(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionLiftResponse(rsp)
}

// GetColorCorrectionLumaContributionWithResponse request returning *GetColorCorrectionLumaContributionResponse
func (c *ClientWithResponses) GetColorCorrectionLumaContributionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionLumaContributionResponse, error) {
	rsp, err := c.GetColorCorrectionLumaContribution(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColorCorrectionLumaContributionResponse(rsp)
}

// PutColorCorrectionLumaContributionWithBodyWithResponse request with arbitrary body returning *PutColorCorrectionLumaContributionResponse
func (c *ClientWithResponses) PutColorCorrectionLumaContributionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionLumaContributionResponse, error) {
	rsp, err := c.PutColorCorrectionLumaContributionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionLumaContributionResponse(rsp)
}

func (c *ClientWithResponses) PutColorCorrectionLumaContributionWithResponse(ctx context.Context, body PutColorCorrectionLumaContributionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionLumaContributionResponse, error) {
	rsp, err := c.PutColorCorrectionLumaContribution(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionLumaContributionResponse(rsp)
}

// GetColorCorrectionOffsetWithResponse request returning *GetColorCorrectionOffsetResponse
func (c *ClientWithResponses) GetColorCorrectionOffsetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetColorCorrectionOffsetResponse, error) {
	rsp, err := c.GetColorCorrectionOffset(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColorCorrectionOffsetResponse(rsp)
}

// PutColorCorrectionOffsetWithBodyWithResponse request with arbitrary body returning *PutColorCorrectionOffsetResponse
func (c *ClientWithResponses) PutColorCorrectionOffsetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutColorCorrectionOffsetResponse, error) {
	rsp, err := c.PutColorCorrectionOffsetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionOffsetResponse(rsp)
}

func (c *ClientWithResponses) PutColorCorrectionOffsetWithResponse(ctx context.Context, body PutColorCorrectionOffsetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutColorCorrectionOffsetResponse, error) {
	rsp, err := c.PutColorCorrectionOffset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutColorCorrectionOffsetResponse(rsp)
}

// GetEventListWithResponse request returning *GetEventListResponse
func (c *ClientWithResponses) GetEventListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEventListResponse, error) {
	rsp, err := c.GetEventList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventListResponse(rsp)
}

// GetLensFocusWithResponse request returning *GetLensFocusResponse
func (c *ClientWithResponses) GetLensFocusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLensFocusResponse, error) {
	rsp, err := c.GetLensFocus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLensFocusResponse(rsp)
}

// PutLensFocusWithBodyWithResponse request with arbitrary body returning *PutLensFocusResponse
func (c *ClientWithResponses) PutLensFocusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLensFocusResponse, error) {
	rsp, err := c.PutLensFocusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLensFocusResponse(rsp)
}

func (c *ClientWithResponses) PutLensFocusWithResponse(ctx context.Context, body PutLensFocusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLensFocusResponse, error) {
	rsp, err := c.PutLensFocus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLensFocusResponse(rsp)
}

// PutLensFocusDoAutoFocusWithResponse request returning *PutLensFocusDoAutoFocusResponse
func (c *ClientWithResponses) PutLensFocusDoAutoFocusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutLensFocusDoAutoFocusResponse, error) {
	rsp, err := c.PutLensFocusDoAutoFocus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLensFocusDoAutoFocusResponse(rsp)
}

// GetLensIrisWithResponse request returning *GetLensIrisResponse
func (c *ClientWithResponses) GetLensIrisWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLensIrisResponse, error) {
	rsp, err := c.GetLensIris(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLensIrisResponse(rsp)
}

// PutLensIrisWithBodyWithResponse request with arbitrary body returning *PutLensIrisResponse
func (c *ClientWithResponses) PutLensIrisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLensIrisResponse, error) {
	rsp, err := c.PutLensIrisWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLensIrisResponse(rsp)
}

func (c *ClientWithResponses) PutLensIrisWithResponse(ctx context.Context, body PutLensIrisJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLensIrisResponse, error) {
	rsp, err := c.PutLensIris(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLensIrisResponse(rsp)
}

// GetLensZoomWithResponse request returning *GetLensZoomResponse
func (c *ClientWithResponses) GetLensZoomWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLensZoomResponse, error) {
	rsp, err := c.GetLensZoom(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLensZoomResponse(rsp)
}

// PutLensZoomWithBodyWithResponse request with arbitrary body returning *PutLensZoomResponse
func (c *ClientWithResponses) PutLensZoomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLensZoomResponse, error) {
	rsp, err := c.PutLensZoomWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLensZoomResponse(rsp)
}

func (c *ClientWithResponses) PutLensZoomWithResponse(ctx context.Context, body PutLensZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLensZoomResponse, error) {
	rsp, err := c.PutLensZoom(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLensZoomResponse(rsp)
}

// GetMediaActiveWithResponse request returning *GetMediaActiveResponse
func (c *ClientWithResponses) GetMediaActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMediaActiveResponse, error) {
	rsp, err := c.GetMediaActive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMediaActiveResponse(rsp)
}

// PutMediaActiveWithBodyWithResponse request with arbitrary body returning *PutMediaActiveResponse
func (c *ClientWithResponses) PutMediaActiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMediaActiveResponse, error) {
	rsp, err := c.PutMediaActiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMediaActiveResponse(rsp)
}

func (c *ClientWithResponses) PutMediaActiveWithResponse(ctx context.Context, body PutMediaActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMediaActiveResponse, error) {
	rsp, err := c.PutMediaActive(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMediaActiveResponse(rsp)
}

// GetMediaDevicesDoformatSupportedFilesystemsWithResponse request returning *GetMediaDevicesDoformatSupportedFilesystemsResponse
func (c *ClientWithResponses) GetMediaDevicesDoformatSupportedFilesystemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMediaDevicesDoformatSupportedFilesystemsResponse, error) {
	rsp, err := c.GetMediaDevicesDoformatSupportedFilesystems(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMediaDevicesDoformatSupportedFilesystemsResponse(rsp)
}

// GetMediaDevicesDeviceNameWithResponse request returning *GetMediaDevicesDeviceNameResponse
func (c *ClientWithResponses) GetMediaDevicesDeviceNameWithResponse(ctx context.Context, deviceName string, reqEditors ...RequestEditorFn) (*GetMediaDevicesDeviceNameResponse, error) {
	rsp, err := c.GetMediaDevicesDeviceName(ctx, deviceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMediaDevicesDeviceNameResponse(rsp)
}

// GetMediaDevicesDeviceNameDoformatWithResponse request returning *GetMediaDevicesDeviceNameDoformatResponse
func (c *ClientWithResponses) GetMediaDevicesDeviceNameDoformatWithResponse(ctx context.Context, deviceName string, reqEditors ...RequestEditorFn) (*GetMediaDevicesDeviceNameDoformatResponse, error) {
	rsp, err := c.GetMediaDevicesDeviceNameDoformat(ctx, deviceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMediaDevicesDeviceNameDoformatResponse(rsp)
}

// PutMediaDevicesDeviceNameDoformatWithBodyWithResponse request with arbitrary body returning *PutMediaDevicesDeviceNameDoformatResponse
func (c *ClientWithResponses) PutMediaDevicesDeviceNameDoformatWithBodyWithResponse(ctx context.Context, deviceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMediaDevicesDeviceNameDoformatResponse, error) {
	rsp, err := c.PutMediaDevicesDeviceNameDoformatWithBody(ctx, deviceName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMediaDevicesDeviceNameDoformatResponse(rsp)
}

func (c *ClientWithResponses) PutMediaDevicesDeviceNameDoformatWithResponse(ctx context.Context, deviceName string, body PutMediaDevicesDeviceNameDoformatJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMediaDevicesDeviceNameDoformatResponse, error) {
	rsp, err := c.PutMediaDevicesDeviceNameDoformat(ctx, deviceName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMediaDevicesDeviceNameDoformatResponse(rsp)
}

// GetMediaWorkingsetWithResponse request returning *GetMediaWorkingsetResponse
func (c *ClientWithResponses) GetMediaWorkingsetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMediaWorkingsetResponse, error) {
	rsp, err := c.GetMediaWorkingset(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMediaWorkingsetResponse(rsp)
}

// GetPresetsWithResponse request returning *GetPresetsResponse
func (c *ClientWithResponses) GetPresetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPresetsResponse, error) {
	rsp, err := c.GetPresets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPresetsResponse(rsp)
}

// PostPresetsWithBodyWithResponse request with arbitrary body returning *PostPresetsResponse
func (c *ClientWithResponses) PostPresetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPresetsResponse, error) {
	rsp, err := c.PostPresetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPresetsResponse(rsp)
}

// GetPresetsActiveWithResponse request returning *GetPresetsActiveResponse
func (c *ClientWithResponses) GetPresetsActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPresetsActiveResponse, error) {
	rsp, err := c.GetPresetsActive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPresetsActiveResponse(rsp)
}

// PutPresetsActiveWithBodyWithResponse request with arbitrary body returning *PutPresetsActiveResponse
func (c *ClientWithResponses) PutPresetsActiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPresetsActiveResponse, error) {
	rsp, err := c.PutPresetsActiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPresetsActiveResponse(rsp)
}

func (c *ClientWithResponses) PutPresetsActiveWithResponse(ctx context.Context, body PutPresetsActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPresetsActiveResponse, error) {
	rsp, err := c.PutPresetsActive(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPresetsActiveResponse(rsp)
}

// DeletePresetsPresetNameWithResponse request returning *DeletePresetsPresetNameResponse
func (c *ClientWithResponses) DeletePresetsPresetNameWithResponse(ctx context.Context, presetName string, reqEditors ...RequestEditorFn) (*DeletePresetsPresetNameResponse, error) {
	rsp, err := c.DeletePresetsPresetName(ctx, presetName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePresetsPresetNameResponse(rsp)
}

// GetPresetsPresetNameWithResponse request returning *GetPresetsPresetNameResponse
func (c *ClientWithResponses) GetPresetsPresetNameWithResponse(ctx context.Context, presetName string, reqEditors ...RequestEditorFn) (*GetPresetsPresetNameResponse, error) {
	rsp, err := c.GetPresetsPresetName(ctx, presetName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPresetsPresetNameResponse(rsp)
}

// PutPresetsPresetNameWithResponse request returning *PutPresetsPresetNameResponse
func (c *ClientWithResponses) PutPresetsPresetNameWithResponse(ctx context.Context, presetName string, reqEditors ...RequestEditorFn) (*PutPresetsPresetNameResponse, error) {
	rsp, err := c.PutPresetsPresetName(ctx, presetName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPresetsPresetNameResponse(rsp)
}

// GetSystemWithResponse request returning *GetSystemResponse
func (c *ClientWithResponses) GetSystemWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemResponse, error) {
	rsp, err := c.GetSystem(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemResponse(rsp)
}

// GetSystemCodecFormatWithResponse request returning *GetSystemCodecFormatResponse
func (c *ClientWithResponses) GetSystemCodecFormatWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemCodecFormatResponse, error) {
	rsp, err := c.GetSystemCodecFormat(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemCodecFormatResponse(rsp)
}

// PutSystemCodecFormatWithBodyWithResponse request with arbitrary body returning *PutSystemCodecFormatResponse
func (c *ClientWithResponses) PutSystemCodecFormatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemCodecFormatResponse, error) {
	rsp, err := c.PutSystemCodecFormatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemCodecFormatResponse(rsp)
}

func (c *ClientWithResponses) PutSystemCodecFormatWithResponse(ctx context.Context, body PutSystemCodecFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemCodecFormatResponse, error) {
	rsp, err := c.PutSystemCodecFormat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemCodecFormatResponse(rsp)
}

// GetSystemFormatWithResponse request returning *GetSystemFormatResponse
func (c *ClientWithResponses) GetSystemFormatWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemFormatResponse, error) {
	rsp, err := c.GetSystemFormat(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemFormatResponse(rsp)
}

// PutSystemFormatWithBodyWithResponse request with arbitrary body returning *PutSystemFormatResponse
func (c *ClientWithResponses) PutSystemFormatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemFormatResponse, error) {
	rsp, err := c.PutSystemFormatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemFormatResponse(rsp)
}

func (c *ClientWithResponses) PutSystemFormatWithResponse(ctx context.Context, body PutSystemFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemFormatResponse, error) {
	rsp, err := c.PutSystemFormat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemFormatResponse(rsp)
}

// GetSystemSupportedCodecFormatsWithResponse request returning *GetSystemSupportedCodecFormatsResponse
func (c *ClientWithResponses) GetSystemSupportedCodecFormatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemSupportedCodecFormatsResponse, error) {
	rsp, err := c.GetSystemSupportedCodecFormats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemSupportedCodecFormatsResponse(rsp)
}

// GetSystemSupportedFormatsWithResponse request returning *GetSystemSupportedFormatsResponse
func (c *ClientWithResponses) GetSystemSupportedFormatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemSupportedFormatsResponse, error) {
	rsp, err := c.GetSystemSupportedFormats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemSupportedFormatsResponse(rsp)
}

// GetSystemSupportedVideoFormatsWithResponse request returning *GetSystemSupportedVideoFormatsResponse
func (c *ClientWithResponses) GetSystemSupportedVideoFormatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemSupportedVideoFormatsResponse, error) {
	rsp, err := c.GetSystemSupportedVideoFormats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemSupportedVideoFormatsResponse(rsp)
}

// GetSystemVideoFormatWithResponse request returning *GetSystemVideoFormatResponse
func (c *ClientWithResponses) GetSystemVideoFormatWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemVideoFormatResponse, error) {
	rsp, err := c.GetSystemVideoFormat(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemVideoFormatResponse(rsp)
}

// PutSystemVideoFormatWithBodyWithResponse request with arbitrary body returning *PutSystemVideoFormatResponse
func (c *ClientWithResponses) PutSystemVideoFormatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemVideoFormatResponse, error) {
	rsp, err := c.PutSystemVideoFormatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemVideoFormatResponse(rsp)
}

func (c *ClientWithResponses) PutSystemVideoFormatWithResponse(ctx context.Context, body PutSystemVideoFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemVideoFormatResponse, error) {
	rsp, err := c.PutSystemVideoFormat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemVideoFormatResponse(rsp)
}

// DeleteTimelines0WithResponse request returning *DeleteTimelines0Response
func (c *ClientWithResponses) DeleteTimelines0WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteTimelines0Response, error) {
	rsp, err := c.DeleteTimelines0(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTimelines0Response(rsp)
}

// GetTimelines0WithResponse request returning *GetTimelines0Response
func (c *ClientWithResponses) GetTimelines0WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTimelines0Response, error) {
	rsp, err := c.GetTimelines0(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimelines0Response(rsp)
}

// PostTimelines0AddWithBodyWithResponse request with arbitrary body returning *PostTimelines0AddResponse
func (c *ClientWithResponses) PostTimelines0AddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTimelines0AddResponse, error) {
	rsp, err := c.PostTimelines0AddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTimelines0AddResponse(rsp)
}

func (c *ClientWithResponses) PostTimelines0AddWithResponse(ctx context.Context, body PostTimelines0AddJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTimelines0AddResponse, error) {
	rsp, err := c.PostTimelines0Add(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTimelines0AddResponse(rsp)
}

// GetTransports0WithResponse request returning *GetTransports0Response
func (c *ClientWithResponses) GetTransports0WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0Response, error) {
	rsp, err := c.GetTransports0(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransports0Response(rsp)
}

// PutTransports0WithBodyWithResponse request with arbitrary body returning *PutTransports0Response
func (c *ClientWithResponses) PutTransports0WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTransports0Response, error) {
	rsp, err := c.PutTransports0WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransports0Response(rsp)
}

func (c *ClientWithResponses) PutTransports0WithResponse(ctx context.Context, body PutTransports0JSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransports0Response, error) {
	rsp, err := c.PutTransports0(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransports0Response(rsp)
}

// GetTransports0PlayWithResponse request returning *GetTransports0PlayResponse
func (c *ClientWithResponses) GetTransports0PlayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0PlayResponse, error) {
	rsp, err := c.GetTransports0Play(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransports0PlayResponse(rsp)
}

// PutTransports0PlayWithResponse request returning *PutTransports0PlayResponse
func (c *ClientWithResponses) PutTransports0PlayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutTransports0PlayResponse, error) {
	rsp, err := c.PutTransports0Play(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransports0PlayResponse(rsp)
}

// GetTransports0PlaybackWithResponse request returning *GetTransports0PlaybackResponse
func (c *ClientWithResponses) GetTransports0PlaybackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0PlaybackResponse, error) {
	rsp, err := c.GetTransports0Playback(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransports0PlaybackResponse(rsp)
}

// PutTransports0PlaybackWithBodyWithResponse request with arbitrary body returning *PutTransports0PlaybackResponse
func (c *ClientWithResponses) PutTransports0PlaybackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTransports0PlaybackResponse, error) {
	rsp, err := c.PutTransports0PlaybackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransports0PlaybackResponse(rsp)
}

func (c *ClientWithResponses) PutTransports0PlaybackWithResponse(ctx context.Context, body PutTransports0PlaybackJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransports0PlaybackResponse, error) {
	rsp, err := c.PutTransports0Playback(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransports0PlaybackResponse(rsp)
}

// GetTransports0RecordWithResponse request returning *GetTransports0RecordResponse
func (c *ClientWithResponses) GetTransports0RecordWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0RecordResponse, error) {
	rsp, err := c.GetTransports0Record(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransports0RecordResponse(rsp)
}

// PutTransports0RecordWithBodyWithResponse request with arbitrary body returning *PutTransports0RecordResponse
func (c *ClientWithResponses) PutTransports0RecordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTransports0RecordResponse, error) {
	rsp, err := c.PutTransports0RecordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransports0RecordResponse(rsp)
}

func (c *ClientWithResponses) PutTransports0RecordWithResponse(ctx context.Context, body PutTransports0RecordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransports0RecordResponse, error) {
	rsp, err := c.PutTransports0Record(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransports0RecordResponse(rsp)
}

// GetTransports0StopWithResponse request returning *GetTransports0StopResponse
func (c *ClientWithResponses) GetTransports0StopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0StopResponse, error) {
	rsp, err := c.GetTransports0Stop(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransports0StopResponse(rsp)
}

// PutTransports0StopWithResponse request returning *PutTransports0StopResponse
func (c *ClientWithResponses) PutTransports0StopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutTransports0StopResponse, error) {
	rsp, err := c.PutTransports0Stop(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransports0StopResponse(rsp)
}

// GetTransports0TimecodeWithResponse request returning *GetTransports0TimecodeResponse
func (c *ClientWithResponses) GetTransports0TimecodeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0TimecodeResponse, error) {
	rsp, err := c.GetTransports0Timecode(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransports0TimecodeResponse(rsp)
}

// GetTransports0TimecodeSourceWithResponse request returning *GetTransports0TimecodeSourceResponse
func (c *ClientWithResponses) GetTransports0TimecodeSourceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransports0TimecodeSourceResponse, error) {
	rsp, err := c.GetTransports0TimecodeSource(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransports0TimecodeSourceResponse(rsp)
}

// GetVideoAutoExposureWithResponse request returning *GetVideoAutoExposureResponse
func (c *ClientWithResponses) GetVideoAutoExposureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoAutoExposureResponse, error) {
	rsp, err := c.GetVideoAutoExposure(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideoAutoExposureResponse(rsp)
}

// PutVideoAutoExposureWithBodyWithResponse request with arbitrary body returning *PutVideoAutoExposureResponse
func (c *ClientWithResponses) PutVideoAutoExposureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoAutoExposureResponse, error) {
	rsp, err := c.PutVideoAutoExposureWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoAutoExposureResponse(rsp)
}

func (c *ClientWithResponses) PutVideoAutoExposureWithResponse(ctx context.Context, body PutVideoAutoExposureJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoAutoExposureResponse, error) {
	rsp, err := c.PutVideoAutoExposure(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoAutoExposureResponse(rsp)
}

// GetVideoGainWithResponse request returning *GetVideoGainResponse
func (c *ClientWithResponses) GetVideoGainWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoGainResponse, error) {
	rsp, err := c.GetVideoGain(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideoGainResponse(rsp)
}

// PutVideoGainWithBodyWithResponse request with arbitrary body returning *PutVideoGainResponse
func (c *ClientWithResponses) PutVideoGainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoGainResponse, error) {
	rsp, err := c.PutVideoGainWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoGainResponse(rsp)
}

func (c *ClientWithResponses) PutVideoGainWithResponse(ctx context.Context, body PutVideoGainJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoGainResponse, error) {
	rsp, err := c.PutVideoGain(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoGainResponse(rsp)
}

// GetVideoIsoWithResponse request returning *GetVideoIsoResponse
func (c *ClientWithResponses) GetVideoIsoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoIsoResponse, error) {
	rsp, err := c.GetVideoIso(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideoIsoResponse(rsp)
}

// PutVideoIsoWithBodyWithResponse request with arbitrary body returning *PutVideoIsoResponse
func (c *ClientWithResponses) PutVideoIsoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoIsoResponse, error) {
	rsp, err := c.PutVideoIsoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoIsoResponse(rsp)
}

func (c *ClientWithResponses) PutVideoIsoWithResponse(ctx context.Context, body PutVideoIsoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoIsoResponse, error) {
	rsp, err := c.PutVideoIso(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoIsoResponse(rsp)
}

// GetVideoNdFilterWithResponse request returning *GetVideoNdFilterResponse
func (c *ClientWithResponses) GetVideoNdFilterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoNdFilterResponse, error) {
	rsp, err := c.GetVideoNdFilter(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideoNdFilterResponse(rsp)
}

// PutVideoNdFilterWithBodyWithResponse request with arbitrary body returning *PutVideoNdFilterResponse
func (c *ClientWithResponses) PutVideoNdFilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoNdFilterResponse, error) {
	rsp, err := c.PutVideoNdFilterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoNdFilterResponse(rsp)
}

func (c *ClientWithResponses) PutVideoNdFilterWithResponse(ctx context.Context, body PutVideoNdFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoNdFilterResponse, error) {
	rsp, err := c.PutVideoNdFilter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoNdFilterResponse(rsp)
}

// GetVideoNdFilterDisplayModeWithResponse request returning *GetVideoNdFilterDisplayModeResponse
func (c *ClientWithResponses) GetVideoNdFilterDisplayModeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoNdFilterDisplayModeResponse, error) {
	rsp, err := c.GetVideoNdFilterDisplayMode(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideoNdFilterDisplayModeResponse(rsp)
}

// PutVideoNdFilterDisplayModeWithBodyWithResponse request with arbitrary body returning *PutVideoNdFilterDisplayModeResponse
func (c *ClientWithResponses) PutVideoNdFilterDisplayModeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoNdFilterDisplayModeResponse, error) {
	rsp, err := c.PutVideoNdFilterDisplayModeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoNdFilterDisplayModeResponse(rsp)
}

func (c *ClientWithResponses) PutVideoNdFilterDisplayModeWithResponse(ctx context.Context, body PutVideoNdFilterDisplayModeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoNdFilterDisplayModeResponse, error) {
	rsp, err := c.PutVideoNdFilterDisplayMode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoNdFilterDisplayModeResponse(rsp)
}

// GetVideoShutterWithResponse request returning *GetVideoShutterResponse
func (c *ClientWithResponses) GetVideoShutterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoShutterResponse, error) {
	rsp, err := c.GetVideoShutter(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideoShutterResponse(rsp)
}

// PutVideoShutterWithBodyWithResponse request with arbitrary body returning *PutVideoShutterResponse
func (c *ClientWithResponses) PutVideoShutterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoShutterResponse, error) {
	rsp, err := c.PutVideoShutterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoShutterResponse(rsp)
}

func (c *ClientWithResponses) PutVideoShutterWithResponse(ctx context.Context, body PutVideoShutterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoShutterResponse, error) {
	rsp, err := c.PutVideoShutter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoShutterResponse(rsp)
}

// GetVideoWhiteBalanceWithResponse request returning *GetVideoWhiteBalanceResponse
func (c *ClientWithResponses) GetVideoWhiteBalanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoWhiteBalanceResponse, error) {
	rsp, err := c.GetVideoWhiteBalance(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideoWhiteBalanceResponse(rsp)
}

// PutVideoWhiteBalanceWithBodyWithResponse request with arbitrary body returning *PutVideoWhiteBalanceResponse
func (c *ClientWithResponses) PutVideoWhiteBalanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoWhiteBalanceResponse, error) {
	rsp, err := c.PutVideoWhiteBalanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoWhiteBalanceResponse(rsp)
}

func (c *ClientWithResponses) PutVideoWhiteBalanceWithResponse(ctx context.Context, body PutVideoWhiteBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoWhiteBalanceResponse, error) {
	rsp, err := c.PutVideoWhiteBalance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoWhiteBalanceResponse(rsp)
}

// PutVideoWhiteBalanceDoAutoWithResponse request returning *PutVideoWhiteBalanceDoAutoResponse
func (c *ClientWithResponses) PutVideoWhiteBalanceDoAutoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutVideoWhiteBalanceDoAutoResponse, error) {
	rsp, err := c.PutVideoWhiteBalanceDoAuto(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoWhiteBalanceDoAutoResponse(rsp)
}

// GetVideoWhiteBalanceTintWithResponse request returning *GetVideoWhiteBalanceTintResponse
func (c *ClientWithResponses) GetVideoWhiteBalanceTintWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVideoWhiteBalanceTintResponse, error) {
	rsp, err := c.GetVideoWhiteBalanceTint(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideoWhiteBalanceTintResponse(rsp)
}

// PutVideoWhiteBalanceTintWithBodyWithResponse request with arbitrary body returning *PutVideoWhiteBalanceTintResponse
func (c *ClientWithResponses) PutVideoWhiteBalanceTintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVideoWhiteBalanceTintResponse, error) {
	rsp, err := c.PutVideoWhiteBalanceTintWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoWhiteBalanceTintResponse(rsp)
}

func (c *ClientWithResponses) PutVideoWhiteBalanceTintWithResponse(ctx context.Context, body PutVideoWhiteBalanceTintJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVideoWhiteBalanceTintResponse, error) {
	rsp, err := c.PutVideoWhiteBalanceTint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVideoWhiteBalanceTintResponse(rsp)
}

// ParseGetAudioChannelChannelIndexAvailableResponse parses an HTTP response from a GetAudioChannelChannelIndexAvailableWithResponse call
func ParseGetAudioChannelChannelIndexAvailableResponse(rsp *http.Response) (*GetAudioChannelChannelIndexAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAudioChannelChannelIndexAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Available
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAudioChannelChannelIndexInputResponse parses an HTTP response from a GetAudioChannelChannelIndexInputWithResponse call
func ParseGetAudioChannelChannelIndexInputResponse(rsp *http.Response) (*GetAudioChannelChannelIndexInputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAudioChannelChannelIndexInputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Input
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAudioChannelChannelIndexInputResponse parses an HTTP response from a PutAudioChannelChannelIndexInputWithResponse call
func ParsePutAudioChannelChannelIndexInputResponse(rsp *http.Response) (*PutAudioChannelChannelIndexInputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAudioChannelChannelIndexInputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAudioChannelChannelIndexInputDescriptionResponse parses an HTTP response from a GetAudioChannelChannelIndexInputDescriptionWithResponse call
func ParseGetAudioChannelChannelIndexInputDescriptionResponse(rsp *http.Response) (*GetAudioChannelChannelIndexInputDescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAudioChannelChannelIndexInputDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Description
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAudioChannelChannelIndexLevelResponse parses an HTTP response from a GetAudioChannelChannelIndexLevelWithResponse call
func ParseGetAudioChannelChannelIndexLevelResponse(rsp *http.Response) (*GetAudioChannelChannelIndexLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAudioChannelChannelIndexLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Level
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAudioChannelChannelIndexLevelResponse parses an HTTP response from a PutAudioChannelChannelIndexLevelWithResponse call
func ParsePutAudioChannelChannelIndexLevelResponse(rsp *http.Response) (*PutAudioChannelChannelIndexLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAudioChannelChannelIndexLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAudioChannelChannelIndexLowCutFilterResponse parses an HTTP response from a GetAudioChannelChannelIndexLowCutFilterWithResponse call
func ParseGetAudioChannelChannelIndexLowCutFilterResponse(rsp *http.Response) (*GetAudioChannelChannelIndexLowCutFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAudioChannelChannelIndexLowCutFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LowCutFilter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAudioChannelChannelIndexLowCutFilterResponse parses an HTTP response from a PutAudioChannelChannelIndexLowCutFilterWithResponse call
func ParsePutAudioChannelChannelIndexLowCutFilterResponse(rsp *http.Response) (*PutAudioChannelChannelIndexLowCutFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAudioChannelChannelIndexLowCutFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAudioChannelChannelIndexPaddingResponse parses an HTTP response from a GetAudioChannelChannelIndexPaddingWithResponse call
func ParseGetAudioChannelChannelIndexPaddingResponse(rsp *http.Response) (*GetAudioChannelChannelIndexPaddingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAudioChannelChannelIndexPaddingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Padding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAudioChannelChannelIndexPaddingResponse parses an HTTP response from a PutAudioChannelChannelIndexPaddingWithResponse call
func ParsePutAudioChannelChannelIndexPaddingResponse(rsp *http.Response) (*PutAudioChannelChannelIndexPaddingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAudioChannelChannelIndexPaddingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAudioChannelChannelIndexPhantomPowerResponse parses an HTTP response from a GetAudioChannelChannelIndexPhantomPowerWithResponse call
func ParseGetAudioChannelChannelIndexPhantomPowerResponse(rsp *http.Response) (*GetAudioChannelChannelIndexPhantomPowerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAudioChannelChannelIndexPhantomPowerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PhantomPower
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAudioChannelChannelIndexPhantomPowerResponse parses an HTTP response from a PutAudioChannelChannelIndexPhantomPowerWithResponse call
func ParsePutAudioChannelChannelIndexPhantomPowerResponse(rsp *http.Response) (*PutAudioChannelChannelIndexPhantomPowerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAudioChannelChannelIndexPhantomPowerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAudioChannelChannelIndexSupportedInputsResponse parses an HTTP response from a GetAudioChannelChannelIndexSupportedInputsWithResponse call
func ParseGetAudioChannelChannelIndexSupportedInputsResponse(rsp *http.Response) (*GetAudioChannelChannelIndexSupportedInputsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAudioChannelChannelIndexSupportedInputsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SupportedInputs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetColorCorrectionColorResponse parses an HTTP response from a GetColorCorrectionColorWithResponse call
func ParseGetColorCorrectionColorResponse(rsp *http.Response) (*GetColorCorrectionColorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColorCorrectionColorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Color
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutColorCorrectionColorResponse parses an HTTP response from a PutColorCorrectionColorWithResponse call
func ParsePutColorCorrectionColorResponse(rsp *http.Response) (*PutColorCorrectionColorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutColorCorrectionColorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetColorCorrectionContrastResponse parses an HTTP response from a GetColorCorrectionContrastWithResponse call
func ParseGetColorCorrectionContrastResponse(rsp *http.Response) (*GetColorCorrectionContrastResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColorCorrectionContrastResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contrast
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutColorCorrectionContrastResponse parses an HTTP response from a PutColorCorrectionContrastWithResponse call
func ParsePutColorCorrectionContrastResponse(rsp *http.Response) (*PutColorCorrectionContrastResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutColorCorrectionContrastResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetColorCorrectionGainResponse parses an HTTP response from a GetColorCorrectionGainWithResponse call
func ParseGetColorCorrectionGainResponse(rsp *http.Response) (*GetColorCorrectionGainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColorCorrectionGainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Gain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutColorCorrectionGainResponse parses an HTTP response from a PutColorCorrectionGainWithResponse call
func ParsePutColorCorrectionGainResponse(rsp *http.Response) (*PutColorCorrectionGainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutColorCorrectionGainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetColorCorrectionGammaResponse parses an HTTP response from a GetColorCorrectionGammaWithResponse call
func ParseGetColorCorrectionGammaResponse(rsp *http.Response) (*GetColorCorrectionGammaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColorCorrectionGammaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Gamma
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutColorCorrectionGammaResponse parses an HTTP response from a PutColorCorrectionGammaWithResponse call
func ParsePutColorCorrectionGammaResponse(rsp *http.Response) (*PutColorCorrectionGammaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutColorCorrectionGammaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetColorCorrectionLiftResponse parses an HTTP response from a GetColorCorrectionLiftWithResponse call
func ParseGetColorCorrectionLiftResponse(rsp *http.Response) (*GetColorCorrectionLiftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColorCorrectionLiftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Lift
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutColorCorrectionLiftResponse parses an HTTP response from a PutColorCorrectionLiftWithResponse call
func ParsePutColorCorrectionLiftResponse(rsp *http.Response) (*PutColorCorrectionLiftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutColorCorrectionLiftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetColorCorrectionLumaContributionResponse parses an HTTP response from a GetColorCorrectionLumaContributionWithResponse call
func ParseGetColorCorrectionLumaContributionResponse(rsp *http.Response) (*GetColorCorrectionLumaContributionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColorCorrectionLumaContributionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LumaContribution
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutColorCorrectionLumaContributionResponse parses an HTTP response from a PutColorCorrectionLumaContributionWithResponse call
func ParsePutColorCorrectionLumaContributionResponse(rsp *http.Response) (*PutColorCorrectionLumaContributionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutColorCorrectionLumaContributionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetColorCorrectionOffsetResponse parses an HTTP response from a GetColorCorrectionOffsetWithResponse call
func ParseGetColorCorrectionOffsetResponse(rsp *http.Response) (*GetColorCorrectionOffsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColorCorrectionOffsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Offset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutColorCorrectionOffsetResponse parses an HTTP response from a PutColorCorrectionOffsetWithResponse call
func ParsePutColorCorrectionOffsetResponse(rsp *http.Response) (*PutColorCorrectionOffsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutColorCorrectionOffsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEventListResponse parses an HTTP response from a GetEventListWithResponse call
func ParseGetEventListResponse(rsp *http.Response) (*GetEventListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLensFocusResponse parses an HTTP response from a GetLensFocusWithResponse call
func ParseGetLensFocusResponse(rsp *http.Response) (*GetLensFocusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLensFocusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Focus Normalised value
			Focus *Normalised `json:"focus,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutLensFocusResponse parses an HTTP response from a PutLensFocusWithResponse call
func ParsePutLensFocusResponse(rsp *http.Response) (*PutLensFocusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLensFocusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutLensFocusDoAutoFocusResponse parses an HTTP response from a PutLensFocusDoAutoFocusWithResponse call
func ParsePutLensFocusDoAutoFocusResponse(rsp *http.Response) (*PutLensFocusDoAutoFocusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLensFocusDoAutoFocusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLensIrisResponse parses an HTTP response from a GetLensIrisWithResponse call
func ParseGetLensIrisResponse(rsp *http.Response) (*GetLensIrisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLensIrisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApertureNumber Aperture number
			ApertureNumber *ApertureNumber `json:"apertureNumber,omitempty"`

			// ApertureStop Aperture stop value
			ApertureStop *ApertureStop `json:"apertureStop,omitempty"`

			// ContinuousApertureAutoExposure Is Aperture controlled by auto exposure
			ContinuousApertureAutoExposure *bool `json:"continuousApertureAutoExposure,omitempty"`

			// Normalised Normalised value
			Normalised *Normalised `json:"normalised,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutLensIrisResponse parses an HTTP response from a PutLensIrisWithResponse call
func ParsePutLensIrisResponse(rsp *http.Response) (*PutLensIrisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLensIrisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLensZoomResponse parses an HTTP response from a GetLensZoomWithResponse call
func ParseGetLensZoomResponse(rsp *http.Response) (*GetLensZoomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLensZoomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// FocalLength Focal length in mm
			FocalLength *FocalLength `json:"focalLength,omitempty"`

			// Normalised Normalised value
			Normalised *Normalised `json:"normalised,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutLensZoomResponse parses an HTTP response from a PutLensZoomWithResponse call
func ParsePutLensZoomResponse(rsp *http.Response) (*PutLensZoomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLensZoomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMediaActiveResponse parses an HTTP response from a GetMediaActiveWithResponse call
func ParseGetMediaActiveResponse(rsp *http.Response) (*GetMediaActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMediaActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActiveMedia
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutMediaActiveResponse parses an HTTP response from a PutMediaActiveWithResponse call
func ParsePutMediaActiveResponse(rsp *http.Response) (*PutMediaActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMediaActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMediaDevicesDoformatSupportedFilesystemsResponse parses an HTTP response from a GetMediaDevicesDoformatSupportedFilesystemsWithResponse call
func ParseGetMediaDevicesDoformatSupportedFilesystemsResponse(rsp *http.Response) (*GetMediaDevicesDoformatSupportedFilesystemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMediaDevicesDoformatSupportedFilesystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DoFormatSupportedFilesystems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMediaDevicesDeviceNameResponse parses an HTTP response from a GetMediaDevicesDeviceNameWithResponse call
func ParseGetMediaDevicesDeviceNameResponse(rsp *http.Response) (*GetMediaDevicesDeviceNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMediaDevicesDeviceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MediaDeviceInformation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMediaDevicesDeviceNameDoformatResponse parses an HTTP response from a GetMediaDevicesDeviceNameDoformatWithResponse call
func ParseGetMediaDevicesDeviceNameDoformatResponse(rsp *http.Response) (*GetMediaDevicesDeviceNameDoformatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMediaDevicesDeviceNameDoformatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// DeviceName Internal device name of this media device
			DeviceName *string `json:"deviceName,omitempty"`

			// Key The key used to format this device, it must be fetched with the GET request and then provided back with a PUT request
			Key *FormatKey `json:"key,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutMediaDevicesDeviceNameDoformatResponse parses an HTTP response from a PutMediaDevicesDeviceNameDoformatWithResponse call
func ParsePutMediaDevicesDeviceNameDoformatResponse(rsp *http.Response) (*PutMediaDevicesDeviceNameDoformatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMediaDevicesDeviceNameDoformatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMediaWorkingsetResponse parses an HTTP response from a GetMediaWorkingsetWithResponse call
func ParseGetMediaWorkingsetResponse(rsp *http.Response) (*GetMediaWorkingsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMediaWorkingsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workingset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPresetsResponse parses an HTTP response from a GetPresetsWithResponse call
func ParseGetPresetsResponse(rsp *http.Response) (*GetPresetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPresetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PresetList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPresetsResponse parses an HTTP response from a PostPresetsWithResponse call
func ParsePostPresetsResponse(rsp *http.Response) (*PostPresetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPresetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostPresetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPresetsActiveResponse parses an HTTP response from a GetPresetsActiveWithResponse call
func ParseGetPresetsActiveResponse(rsp *http.Response) (*GetPresetsActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPresetsActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivePreset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPresetsActiveResponse parses an HTTP response from a PutPresetsActiveWithResponse call
func ParsePutPresetsActiveResponse(rsp *http.Response) (*PutPresetsActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPresetsActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePresetsPresetNameResponse parses an HTTP response from a DeletePresetsPresetNameWithResponse call
func ParseDeletePresetsPresetNameResponse(rsp *http.Response) (*DeletePresetsPresetNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePresetsPresetNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPresetsPresetNameResponse parses an HTTP response from a GetPresetsPresetNameWithResponse call
func ParseGetPresetsPresetNameResponse(rsp *http.Response) (*GetPresetsPresetNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPresetsPresetNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutPresetsPresetNameResponse parses an HTTP response from a PutPresetsPresetNameWithResponse call
func ParsePutPresetsPresetNameResponse(rsp *http.Response) (*PutPresetsPresetNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPresetsPresetNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemResponse parses an HTTP response from a GetSystemWithResponse call
func ParseGetSystemResponse(rsp *http.Response) (*GetSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemCodecFormatResponse parses an HTTP response from a GetSystemCodecFormatWithResponse call
func ParseGetSystemCodecFormatResponse(rsp *http.Response) (*GetSystemCodecFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemCodecFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CodecFormat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSystemCodecFormatResponse parses an HTTP response from a PutSystemCodecFormatWithResponse call
func ParsePutSystemCodecFormatResponse(rsp *http.Response) (*PutSystemCodecFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSystemCodecFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemFormatResponse parses an HTTP response from a GetSystemFormatWithResponse call
func ParseGetSystemFormatResponse(rsp *http.Response) (*GetSystemFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Format
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSystemFormatResponse parses an HTTP response from a PutSystemFormatWithResponse call
func ParsePutSystemFormatResponse(rsp *http.Response) (*PutSystemFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSystemFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemSupportedCodecFormatsResponse parses an HTTP response from a GetSystemSupportedCodecFormatsWithResponse call
func ParseGetSystemSupportedCodecFormatsResponse(rsp *http.Response) (*GetSystemSupportedCodecFormatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemSupportedCodecFormatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SupportedCodecFormats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemSupportedFormatsResponse parses an HTTP response from a GetSystemSupportedFormatsWithResponse call
func ParseGetSystemSupportedFormatsResponse(rsp *http.Response) (*GetSystemSupportedFormatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemSupportedFormatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SupportedFormats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemSupportedVideoFormatsResponse parses an HTTP response from a GetSystemSupportedVideoFormatsWithResponse call
func ParseGetSystemSupportedVideoFormatsResponse(rsp *http.Response) (*GetSystemSupportedVideoFormatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemSupportedVideoFormatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SupportedVideoFormats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemVideoFormatResponse parses an HTTP response from a GetSystemVideoFormatWithResponse call
func ParseGetSystemVideoFormatResponse(rsp *http.Response) (*GetSystemVideoFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemVideoFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetVideoFormat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSystemVideoFormatResponse parses an HTTP response from a PutSystemVideoFormatWithResponse call
func ParsePutSystemVideoFormatResponse(rsp *http.Response) (*PutSystemVideoFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSystemVideoFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteTimelines0Response parses an HTTP response from a DeleteTimelines0WithResponse call
func ParseDeleteTimelines0Response(rsp *http.Response) (*DeleteTimelines0Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTimelines0Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTimelines0Response parses an HTTP response from a GetTimelines0WithResponse call
func ParseGetTimelines0Response(rsp *http.Response) (*GetTimelines0Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimelines0Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Timeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTimelines0AddResponse parses an HTTP response from a PostTimelines0AddWithResponse call
func ParsePostTimelines0AddResponse(rsp *http.Response) (*PostTimelines0AddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTimelines0AddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTransports0Response parses an HTTP response from a GetTransports0WithResponse call
func ParseGetTransports0Response(rsp *http.Response) (*GetTransports0Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransports0Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTransports0Response parses an HTTP response from a PutTransports0WithResponse call
func ParsePutTransports0Response(rsp *http.Response) (*PutTransports0Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTransports0Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTransports0PlayResponse parses an HTTP response from a GetTransports0PlayWithResponse call
func ParseGetTransports0PlayResponse(rsp *http.Response) (*GetTransports0PlayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransports0PlayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTransports0PlayResponse parses an HTTP response from a PutTransports0PlayWithResponse call
func ParsePutTransports0PlayResponse(rsp *http.Response) (*PutTransports0PlayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTransports0PlayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTransports0PlaybackResponse parses an HTTP response from a GetTransports0PlaybackWithResponse call
func ParseGetTransports0PlaybackResponse(rsp *http.Response) (*GetTransports0PlaybackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransports0PlaybackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Playback
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTransports0PlaybackResponse parses an HTTP response from a PutTransports0PlaybackWithResponse call
func ParsePutTransports0PlaybackResponse(rsp *http.Response) (*PutTransports0PlaybackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTransports0PlaybackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTransports0RecordResponse parses an HTTP response from a GetTransports0RecordWithResponse call
func ParseGetTransports0RecordResponse(rsp *http.Response) (*GetTransports0RecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransports0RecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTransports0RecordResponse parses an HTTP response from a PutTransports0RecordWithResponse call
func ParsePutTransports0RecordResponse(rsp *http.Response) (*PutTransports0RecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTransports0RecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTransports0StopResponse parses an HTTP response from a GetTransports0StopWithResponse call
func ParseGetTransports0StopResponse(rsp *http.Response) (*GetTransports0StopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransports0StopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTransports0StopResponse parses an HTTP response from a PutTransports0StopWithResponse call
func ParsePutTransports0StopResponse(rsp *http.Response) (*PutTransports0StopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTransports0StopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTransports0TimecodeResponse parses an HTTP response from a GetTransports0TimecodeWithResponse call
func ParseGetTransports0TimecodeResponse(rsp *http.Response) (*GetTransports0TimecodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransports0TimecodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Timecode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTransports0TimecodeSourceResponse parses an HTTP response from a GetTransports0TimecodeSourceWithResponse call
func ParseGetTransports0TimecodeSourceResponse(rsp *http.Response) (*GetTransports0TimecodeSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransports0TimecodeSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimecodeSource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVideoAutoExposureResponse parses an HTTP response from a GetVideoAutoExposureWithResponse call
func ParseGetVideoAutoExposureResponse(rsp *http.Response) (*GetVideoAutoExposureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideoAutoExposureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Mode Auto exposure mode
			Mode *AutoExposureMode `json:"mode,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVideoAutoExposureResponse parses an HTTP response from a PutVideoAutoExposureWithResponse call
func ParsePutVideoAutoExposureResponse(rsp *http.Response) (*PutVideoAutoExposureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVideoAutoExposureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVideoGainResponse parses an HTTP response from a GetVideoGainWithResponse call
func ParseGetVideoGainResponse(rsp *http.Response) (*GetVideoGainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideoGainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Gain Current gain value in decibels
			Gain *int `json:"gain,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVideoGainResponse parses an HTTP response from a PutVideoGainWithResponse call
func ParsePutVideoGainResponse(rsp *http.Response) (*PutVideoGainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVideoGainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVideoIsoResponse parses an HTTP response from a GetVideoIsoWithResponse call
func ParseGetVideoIsoResponse(rsp *http.Response) (*GetVideoIsoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideoIsoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Iso Current ISO value
			Iso *int `json:"iso,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVideoIsoResponse parses an HTTP response from a PutVideoIsoWithResponse call
func ParsePutVideoIsoResponse(rsp *http.Response) (*PutVideoIsoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVideoIsoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVideoNdFilterResponse parses an HTTP response from a GetVideoNdFilterWithResponse call
func ParseGetVideoNdFilterResponse(rsp *http.Response) (*GetVideoNdFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideoNdFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Stop Current filter power (fStop)
			Stop *float32 `json:"stop,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVideoNdFilterResponse parses an HTTP response from a PutVideoNdFilterWithResponse call
func ParsePutVideoNdFilterResponse(rsp *http.Response) (*PutVideoNdFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVideoNdFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVideoNdFilterDisplayModeResponse parses an HTTP response from a GetVideoNdFilterDisplayModeWithResponse call
func ParseGetVideoNdFilterDisplayModeResponse(rsp *http.Response) (*GetVideoNdFilterDisplayModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideoNdFilterDisplayModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DisplayMode *NdFilterDisplayMode `json:"displayMode,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVideoNdFilterDisplayModeResponse parses an HTTP response from a PutVideoNdFilterDisplayModeWithResponse call
func ParsePutVideoNdFilterDisplayModeResponse(rsp *http.Response) (*PutVideoNdFilterDisplayModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVideoNdFilterDisplayModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVideoShutterResponse parses an HTTP response from a GetVideoShutterWithResponse call
func ParseGetVideoShutterResponse(rsp *http.Response) (*GetVideoShutterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideoShutterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ContinuousShutterAutoExposure Is shutter controlled by auto exposure
			ContinuousShutterAutoExposure *bool `json:"continuousShutterAutoExposure,omitempty"`

			// ShutterAngle Shutter angle
			ShutterAngle *ShutterAngle `json:"shutterAngle,omitempty"`

			// ShutterSpeed Shutter speed value in fractions of a second (minimum is sensor frame rate)
			ShutterSpeed *ShutterSpeed `json:"shutterSpeed,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVideoShutterResponse parses an HTTP response from a PutVideoShutterWithResponse call
func ParsePutVideoShutterResponse(rsp *http.Response) (*PutVideoShutterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVideoShutterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVideoWhiteBalanceResponse parses an HTTP response from a GetVideoWhiteBalanceWithResponse call
func ParseGetVideoWhiteBalanceResponse(rsp *http.Response) (*GetVideoWhiteBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideoWhiteBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// WhiteBalance Current white balance
			WhiteBalance *int `json:"whiteBalance,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVideoWhiteBalanceResponse parses an HTTP response from a PutVideoWhiteBalanceWithResponse call
func ParsePutVideoWhiteBalanceResponse(rsp *http.Response) (*PutVideoWhiteBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVideoWhiteBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVideoWhiteBalanceDoAutoResponse parses an HTTP response from a PutVideoWhiteBalanceDoAutoWithResponse call
func ParsePutVideoWhiteBalanceDoAutoResponse(rsp *http.Response) (*PutVideoWhiteBalanceDoAutoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVideoWhiteBalanceDoAutoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVideoWhiteBalanceTintResponse parses an HTTP response from a GetVideoWhiteBalanceTintWithResponse call
func ParseGetVideoWhiteBalanceTintResponse(rsp *http.Response) (*GetVideoWhiteBalanceTintResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideoWhiteBalanceTintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// WhiteBalanceTint Current white balance tint
			WhiteBalanceTint *int `json:"whiteBalanceTint,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutVideoWhiteBalanceTintResponse parses an HTTP response from a PutVideoWhiteBalanceTintWithResponse call
func ParsePutVideoWhiteBalanceTintResponse(rsp *http.Response) (*PutVideoWhiteBalanceTintResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVideoWhiteBalanceTintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
