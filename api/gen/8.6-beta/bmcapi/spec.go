// Package bmcapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package bmcapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//zesDZsnqgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
